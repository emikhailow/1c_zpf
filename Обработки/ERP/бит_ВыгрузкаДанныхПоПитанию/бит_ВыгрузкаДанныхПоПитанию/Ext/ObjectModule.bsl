#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	ПараметрыРегистрации.Наименование = Метаданные().Представление();
	ПараметрыРегистрации.Информация = "Выгрузка данных по питанию";
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "1.0.0.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	КомандаПечати = ПараметрыРегистрации.Команды.Добавить();
	КомандаПечати.Идентификатор = "ВыгрузкаДанныхПоПитанию";
	КомандаПечати.Представление = НСтр("ru = 'Выгрузка данных по питанию'");
	КомандаПечати.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	КомандаПечати.ПоказыватьОповещение = Истина;
	
	КомандаПечати = ПараметрыРегистрации.Команды.Добавить();
	КомандаПечати.Идентификатор = "НастройкаПараметровРегламентногоЗадания";
	КомандаПечати.Представление = НСтр("ru = 'Настройка параметров выполнения регл. задания'");
	КомандаПечати.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	КомандаПечати.ПоказыватьОповещение = Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения) Экспорт
	
	ОписаниеОшибки = ПолучитьПараметрыВыполненияРегламентногоЗадания();
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторКоманды = "ВыгрузкаДанныхПоПитанию" Тогда
		ВыполнитьОбмен(ПараметрыВыполнения);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбмен(ПараметрыВыполнения)
	
	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	Обработка.РежимОбмена = "Выгрузка";
	Обработка.ЗагружатьДанныеВРежимеОбмена = Истина;
	Обработка.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты = Ложь;
	Обработка.ИспользоватьОтборПоДатеДляВсехОбъектов = Ложь;
	Обработка.ВыгружатьТолькоРазрешенные = Ложь;
	
	Если ПараметрыВыполнения.Свойство("РучнойРежимВыполнения") Тогда
		Обработка.ДатаНачала = ДатаНачала;
		Обработка.ДатаОкончания = КонецДня(ДатаОкончания);
	Иначе
		Обработка.ДатаНачала = НачалоДня(НачалоДня(ТекущаяДата())-1);
		Обработка.ДатаОкончания = НачалоДня(ТекущаяДата())-1;
	КонецЕсли;
	
	Обработка.НепосредственноеЧтениеВИБПриемнике = Истина;
	Обработка.ТипИнформационнойБазыДляПодключения = Ложь;
	
	Обработка.ПарольИнформационнойБазыДляПодключения = ПарольИнформационнойБазыДляПодключения;
	Обработка.ПользовательИнформационнойБазыДляПодключения = ПользовательИнформационнойБазыДляПодключения;
	Обработка.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	Обработка.ВерсияПлатформыИнформационнойБазыДляПодключения = "V83";
	Обработка.ИмяСервераИнформационнойБазыДляПодключения = ИмяСервераИнформационнойБазыДляПодключения;
	Обработка.ИмяИнформационнойБазыНаСервереДляПодключения = ИмяИнформационнойБазыНаСервереДляПодключения;
	
	Обработка.ТипУдаленияРегистрацииИзмененийДляУзловОбменаПослеВыгрузки = 0; 
	
	УникальныйИД                   = Новый УникальныйИдентификатор;
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИД + ".xml";
	Обработка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	
	МакетПравилОбмена = ПолучитьМакет("ПравилаОбменаТекст");
	ТекстПравилОбмена = МакетПравилОбмена.ПолучитьТекст();  
	Обработка.ЗагрузитьПравилаОбмена(ТекстПравилОбмена, "Строка");
	
	Обработка.УстановитьЗначениеПараметраВТаблице("Склады", ЗначениеВСтрокуВнутр(Склады.ВыгрузитьКолонку("Склад")));

	Обработка.ВыполнитьВыгрузку();
	
КонецПроцедуры  

#КонецОбласти

#Область ПроцедурыПолученияНастроек

Функция ПолучитьПараметрыВыполненияРегламентногоЗадания(ИнтерактивноеПолучение = Ложь) Экспорт
	
	ОписаниеОшибки = "";	
	ОбработкаРеглЗадания = ПолучитьОбработкуРегламентногоЗадания(ИнтерактивноеПолучение, ОписаниеОшибки);
	
	Если НЕ ОбработкаРеглЗадания.Пустая() Тогда
		
		НастройкиРеглЗадания = ОбработкаРеглЗадания.ХранилищеНастроек.Получить();		
		
		Если НастройкиРеглЗадания <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиРеглЗадания);
			Для каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
				Если НастройкиРеглЗадания.Свойство(ТабличнаяЧасть.Имя) Тогда 
					Для каждого стр Из НастройкиРеглЗадания[ТабличнаяЧасть.Имя] Цикл
						ЗаполнитьЗначенияСвойств(ЭтотОбъект[ТабличнаяЧасть.Имя].Добавить(), Стр);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ИнтерактивноеПолучение Тогда	
			ИмяСобытияЖР = "Фоновое задание. Получение настроек выполнения.";
			ОписаниеОшибки = "Настройки выполнения не заданы";
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки, ОбработкаРеглЗадания, ОписаниеОшибки); 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Функция ПолучитьОбработкуРегламентногоЗадания(ИнтерактивноеПолучение = Ложь, ОписаниеОшибки = "") Экспорт
	
	ОбработкаРеглЗадания = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", Метаданные().Имя);		
	
	Если ОбработкаРеглЗадания.Пустая() Тогда
		ОписаниеОшибки = "В справочнике ""Дополнительные отчеты и обработки"" не обнаружена обработка с именем """ + Метаданные().Имя + """";
		Если НЕ ИнтерактивноеПолучение Тогда
			ИмяСобытияЖР = "Фоновое задание. Получение настроек выполнения.";
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДополнительныеОтчетыИОбработки,,ОписаниеОшибки); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбработкаРеглЗадания;
	
КонецФункции

#КонецОбласти
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

