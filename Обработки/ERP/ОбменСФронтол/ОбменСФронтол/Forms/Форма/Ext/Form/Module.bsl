//Перем Отчет;
//Перем Оплата;
Перем ДлинаКода;
Перем ДлинаКодаХарактреристики;
//Перем СтруктураПараметры;
Перем ЗначениеВыгружатьНаКассуВСтоловую;
Перем Разделитель;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТЧКассы();
	
	ВидыНоменклатуры = Новый Соответствие;
	ВидыНоменклатуры.Вставить("Блюдо бс бх", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Блюдо бс бх"));
	ВидыНоменклатуры.Вставить("Блюдо сс бх", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Блюдо сс бх"));
	ВидыНоменклатуры.Вставить("Продукция бс бх", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция бс бх"));
	ВидыНоменклатуры.Вставить("Продукция бс сх", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция бс сх"));
	ВидыНоменклатуры.Вставить("Продукция сс бх", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция сс бх"));
	ВидыНоменклатуры.Вставить("Продукция сс сх", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция сс сх"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеВыгружатьНаКассуВСтоловую", 	Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Выгружать на кассу в столовую"));
	ДополнительныеПараметры.Вставить("ДлинаКода", 							Метаданные.Справочники.Номенклатура.ДлинаКода);
	ДополнительныеПараметры.Вставить("ДлинаКодаХарактреристики", 			Метаданные.Справочники.ХарактеристикиНоменклатуры.ДлинаКода);
	ДополнительныеПараметры.Вставить("НомерПлатежнойКартыЗаглушка", 		"ЗАГЛУШКА");
	ДополнительныеПараметры.Вставить("ВидыНоменклатуры", 					ВидыНоменклатуры);
	ДополнительныеПараметры.Вставить("Разделитель",							";");
	
	УстановитьОтборСпискаДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧКассы();
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ЗаполнитьТЧКассы();	
	ЗначениеВРеквизитФормы(Об, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура КассыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокКасс(Команда)
	
	ЗаполнитьТЧКассы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыУстановитьФлажки(Команда)
	
	УстановитьЗначениеФлажков(Объект.Документы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажков(Таблица, Значение)
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Пометка = Значение;	
	КонецЦикла	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСнятьФлажки(Команда)
	
	УстановитьЗначениеФлажков(Объект.Документы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КассыУстановитьФлажки(Команда)
	
	УстановитьЗначениеФлажков(Объект.Кассы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КассыСнятьФлажки(Команда)
	
	УстановитьЗначениеФлажков(Объект.Кассы, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ЗагрузитьНаСервере();
	УстановитьОтборСпискаДокументов();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаДокументов();
	
	ДокументыДинамическийСписок.Параметры.УстановитьЗначениеПараметра("МассивДокументы", 
	Объект.Документы.Выгрузить(,"Документ").ВыгрузитьКолонку("Документ"));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	СтруктураПараметры = Новый Структура("ККМ, ДатаНачала, ДатаКонца, Время, НомерСмены, СуммаZВыручки, СуммаZНаличности, СуммаZСменИтог, ТЗПродажи, ТЗОплаты");
	
	ТЗПродажи 	= ПодготовитьТаблицуПродаж();
	ТЗОплаты 	= ПодготовитьТаблицуОплат();
	
	НомерПослЗакрЧека 	= -1;
	НомерПослОплаты 	= -1;
	                                  
	АктивныеКассы = Объект.Кассы.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Для Каждого СтрокаКасса из АктивныеКассы Цикл
		
		Если КассаСоответствуетСкладу(СтрокаКасса.ПодключаемоеОборудование, Склад) Тогда
			
			ДанныеУстройства = Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(СтрокаКасса.ПодключаемоеОборудование).Параметры;
			Если ЗначениеЗаполнено(ДанныеУстройства.ФайлОтчета)Тогда
				
				ПутьФайлОтчета = ДанныеУстройства.ФайлОтчета;
				ФайлОтчет = Новый Файл(ПутьФайлОтчета);
				Если Не ФайлОтчет.Существует() Тогда
					Сообщить("Файл отчета РМК : " + СтрокаКасса.Модель.Наименование + " не обнаружен", СтатусСообщения.Важное);
				Иначе
					
					Если ОтчетЗагружен(ПутьФайлОтчета, 1) Тогда
						
						Сообщить(СтрШаблон("Файл отчета РМК для %1 уже был загружен", СтрокаКасса.ПодключаемоеОборудование), СтатусСообщения.Важное);
						Продолжить;
						
					КонецЕсли;
					
					СтруктураПараметры.Вставить("ККМ", СтрокаКасса.КассаККМ);//ПолучитьКассуККМ(СтрокаКасса.ПодключаемоеОборудование));
					Попытка
						СтруктураДанные = ПолучитьДанныеИзФайлаОтчета(ПутьФайлОтчета);
					Исключение
						
						ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						СтрШаблон("Ошибки при снятии отчета о продажах с кассы %1: %2", 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаКасса.ПодключаемоеОборудование, "Наименование"),
						ИнформацияОбОшибке);
						Продолжить;
						
					КонецПопытки;
					
					ЗаполнитьЗначенияСвойств(СтруктураПараметры, СтруктураДанные, "ДатаНачала, ДатаКонца, Время");
					Для Каждого СтрокаПродажи Из СтруктураДанные["ТЗПродажи"] Цикл
						ЗаполнитьЗначенияСвойств(ТЗПродажи.Добавить(), СтрокаПродажи);	
					КонецЦикла;
					Для Каждого СтрокаОплаты Из СтруктураДанные["ТЗОплаты"] Цикл
						ЗаполнитьЗначенияСвойств(ТЗОплаты.Добавить(), СтрокаОплаты);	
					КонецЦикла;
					
					Попытка
						УстановитьСтатусПрочитано(ПутьФайлОтчета);
					Исключение
						
						ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Сообщить(СтрШаблон("Не удалось установить статус ""Прочитано"" для файла %1 с кассы %2: %3", 
						ПутьФайлОтчета,
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаКасса.ПодключаемоеОборудование, "Наименование"),
						ИнформацияОбОшибке));
						
					КонецПопытки;
					
					ОбновитьСостоянияДокументов();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметры.Вставить("ТЗПродажи", 	ТЗПродажи);
	СтруктураПараметры.Вставить("ТЗОплаты", 	ТЗОплаты);
	
	Если ТЗПродажи.Количество() > 0 Тогда  
		СформироватьОтчетОРозничныхПродажах(СтруктураПараметры);
	КонецЕсли;
	
	ОбновитьСписокДокументовНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусПрочитано(ПутьФайлОтчета)
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПутьФайлОтчета, КодировкаТекста.ANSI);
	ПризнакЗагрузки = СокрЛП(Текст.ПолучитьСтроку(1));
	Текст.ЗаменитьСтроку(1, "@");
	Текст.Записать(ПутьФайлОтчета, КодировкаТекста.ANSI);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИзФайлаОтчета(ПутьФайлОтчета)
	
	СтруктураДанные = Новый Структура;
	
	ФайлОтчета = Новый ТекстовыйДокумент();
	ФайлОтчета.Прочитать(ПутьФайлОтчета, КодировкаТекста.ANSI);
	
	Результат = Неопределено;
	НеизвестнаяТранзакция = Ложь;
	
	ЛогНомерПосСистемы	= ФайлОтчета.ПолучитьСтроку(2);
	НомерОтчета			= ФайлОтчета.ПолучитьСтроку(3);
	
	ВсегоСтрок     = ФайлОтчета.КоличествоСтрок();
	НомНачалаСч    = 4;
	Карта		   = "";//САС
	
	ТЗПродажи 	= ПодготовитьТаблицуПродаж();
	ТЗОплаты 	= ПодготовитьТаблицуОплат();
	
	Для Счетчик = 4 По ВсегоСтрок Цикл
		
		Стр = СтрЗаменить(ФайлОтчета.ПолучитьСтроку(Счетчик), ";", Символы.ПС);
		
		НомерТранзакции  = ПолучитьЧислоИзСтроки(СтрПолучитьСтроку(Стр, 1)); 
		ДатаТранзакции   = ПолучитьДатуИзСтроки (СтрПолучитьСтроку(Стр, 2));
		ВремяТранзакции  = СтрПолучитьСтроку(Стр, 3);
		ТипТранзакции    = ПолучитьЧислоИзСтроки(СтрПолучитьСтроку(Стр, 4));
		НомерДокумента   = ПолучитьЧислоИзСтроки(СтрПолучитьСтроку(Стр, 6));
		НомерСмены	     = ПолучитьЧислоИзСтроки(СтрПолучитьСтроку(Стр,14));
		НомерККМ	     = ПолучитьЧислоИзСтроки(СтрПолучитьСтроку(Стр,17));
		
		Если (ТипТранзакции=1) ИЛИ (ТипТранзакции=11) Тогда 	  // продажа
			
			Код			     = СтрПолучитьСтроку(Стр, 8);
			Разрез		     = СтрПолучитьСтроку(Стр, 9);
			ШКРегистрации    = СтрПолучитьСтроку(Стр, 19); 
			Цена             = ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 10), ",", "."));
			Количество	     = ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 11), ",", "."));
			ФлагВозврата     = ПолучитьЧислоИзСтроки(СтрПолучитьСтроку(Стр, 13));
			Сумма		     = ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 16), ",", "."));
			
			СтрокаОтчета 				= ТЗПродажи.Добавить();
			СтрокаОтчета.Дата           = ДатаТранзакции;
			СтрокаОтчета.Время          = ВремяТранзакции;
			СтрокаОтчета.Код            = Код;
			СтрокаОтчета.Разрез         = Разрез;
			СтрокаОтчета.Цена 			= Цена;
			СтрокаОтчета.Количество     = Количество;
			СтрокаОтчета.Сумма          = Сумма;
			СтрокаОтчета.НомерККМ       = НомерККМ;          
			СтрокаОтчета.НомерСмены     = НомерСмены;
			СтрокаОтчета.ФлагВозврата   = ФлагВозврата;
			ИндексПослРегистрации 		= ТЗПродажи.Индекс(СтрокаОтчета);
			
		ИначеЕсли (ТипТранзакции=2) ИЛИ (ТипТранзакции=12) Тогда  // сторно последней регистрации
			
			Код			     = СтрПолучитьСтроку(Стр, 8);
			Разрез		     = СтрПолучитьСтроку(Стр, 9);
			ШКРегистрации    = СтрПолучитьСтроку(Стр, 19); 
			Цена             = ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 10), ",", "."));
			Количество	     = ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 11), ",", "."));
			ФлагВозврата     = ПолучитьЧислоИзСтроки(СтрПолучитьСтроку(Стр, 13));
			Сумма		     = ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 16), ",", "."));
			СтрокаОтчета = ТЗПродажи.Добавить();
			СтрокаОтчета.Дата              = ДатаТранзакции;
			СтрокаОтчета.Время             = ВремяТранзакции;
			СтрокаОтчета.Код               = Код;
			СтрокаОтчета.Разрез            = Разрез;
			СтрокаОтчета.Цена              = Цена;
			СтрокаОтчета.Количество        = Количество;
			СтрокаОтчета.Сумма             = Сумма;
			СтрокаОтчета.НомерККМ          = НомерККМ;    
			СтрокаОтчета.НомерСмены        = НомерСмены;
			СтрокаОтчета.ФлагВозврата      = ФлагВозврата;
			
		ИначеЕсли ТипТранзакции =  4 Или ТипТранзакции = 14 Тогда // Налог
		ИначеЕсли ТипТранзакции =  5 Или ТипТранзакции = 15       // Скидка на позицию
			Или ТипТранзакции =  7 Или ТипТранзакции = 17 Тогда
		ИначеЕсли ТипТранзакции =  6 Или ТипТранзакции = 16       // Надбавка на позицию
			Или ТипТранзакции =  8 Или ТипТранзакции = 18 Тогда
		ИначеЕсли ТипТранзакции = 35 Или ТипТранзакции = 75       // Скидка на чек
			Или ТипТранзакции = 85 Или ТипТранзакции = 37 
			Или ТипТранзакции = 77 Или ТипТранзакции = 87 Тогда
		ИначеЕсли (ТипТранзакции= 40)ИЛИ(ТипТранзакции = 41)Тогда // 41 Оплата с вводом суммы клиента
			
			СтрокаОплат 			= ТЗОплаты.Добавить();                      // 42 Оплата без ввода суммы клиента
			СтрокаОплат.НомерСмены 	= НомерСмены;
			СтрокаОплат.Дата       	= ДатаТранзакции;
			СтрокаОплат.Код        	= ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 9), ",", "."));
			СтрокаОплат.Сумма	   	= ПолучитьЧислоИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 11), ",", "."));
			СтрокаОплат.Карта      	= Карта;//САС
			
		ИначеЕсли ТипТранзакции = 42 Тогда                        // Открытие чека
			Карта 				  =  СтрПолучитьСтроку(Стр, 8);	  //САС
		ИначеЕсли ТипТранзакции = 50 Тогда                        // Внесение
		ИначеЕсли ТипТранзакции = 51 Тогда                        // Выплата
		ИначеЕсли ТипТранзакции = 55 Тогда                        // закрытие чека
			НомерПослЗакрЧека = ТЗПродажи.Количество() - 1;
			НомерПослОплаты = ТЗОплаты.Количество()-1;
		ИначеЕсли ТипТранзакции = 56 Тогда                        // отмена чека   // Чек не закрыт на ККМ
			
			Сч = ТЗПродажи.Количество() - 1;
			Пока Сч > НомерПослЗакрЧека Цикл
				ТЗПродажи.Удалить(Сч);
				Сч = Сч - 1;
			КонецЦикла;
			
			Сч = ТЗОплаты.Количество() - 1;
			Пока Сч > НомерПослОплаты Цикл
				ТЗОплаты.Удалить(Сч);
				Сч = Сч - 1;
			КонецЦикла;
			
		ИначеЕсли ТипТранзакции = 57 Тогда                        // Восстановление отложенного чека
		ИначеЕсли ТипТранзакции = 60 Тогда                        // Х-отчёт
		ИначеЕсли ТипТранзакции = 61 Тогда                        // закрытие смены
		ИначеЕсли ТипТранзакции = 62 Тогда                        // открытие смены
		ИначеЕсли ТипТранзакции = 63 Тогда                        // Z-отчёт
			
			СтруктураДанные.Вставить("ДатаНачала",      ПолучитьДатуИзСтроки(СтрПолучитьСтроку(СтрЗаменить(ФайлОтчета.ПолучитьСтроку(НомНачалаСч), ";", Символы.ПС), 2)));
			СтруктураДанные.Вставить("ДатаКонца",       ПолучитьДатуИзСтроки(СтрЗаменить(СтрПолучитьСтроку(Стр, 2), ",", ".")));
			СтруктураДанные.Вставить("Время",           СтрПолучитьСтроку(Стр, 3));
			
		ИначеЕсли ТипТранзакции = 64 Тогда                        // Документ открытия смены
		Иначе 
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ТЗПродажи", 	ТЗПродажи);
	СтруктураДанные.Вставить("ТЗОплаты", 	ТЗОплаты);
	
	Возврат СтруктураДанные;
	
КонецФункции

Функция КассаСоответствуетСкладу(Касса, Склад)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ПравилоОбмена.Склад.Подразделение = ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).Подразделение
	|	И ПодключаемоеОборудование.Ссылка = &Касса");
	Запрос.УстановитьПараметр("Касса", Касса);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ОтчетЗагружен(ПутьФайлОтчета, ИндексСтроки)
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПутьФайлОтчета, КодировкаТекста.ANSI);
	ПризнакЗагрузки = СокрЛП(Текст.ПолучитьСтроку(ИндексСтроки));
	Возврат ПризнакЗагрузки <> "#";
	
КонецФункции

Процедура ОбновитьСостоянияДокументов() Экспорт
	Для Каждого СтрокаДок Из Объект.Документы Цикл
		Если СтрокаДок.Документ.ПометкаУдаления Тогда
			СтрокаДок.ПометкаУдаления = Истина;
			СтрокаДок.Проведен        = Ложь;
			СтрокаДок.СтатусДокумента = 2;
		ИначеЕсли СтрокаДок.Документ.Проведен Тогда
			СтрокаДок.ПометкаУдаления = Ложь;
			СтрокаДок.Проведен        = Истина;
			СтрокаДок.СтатусДокумента = 1;
		Иначе
			СтрокаДок.ПометкаУдаления = Ложь;
			СтрокаДок.Проведен        = Ложь;
			СтрокаДок.СтатусДокумента = 3;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЧислоИзСтроки(СтрокаЧисло)
	Если ПустаяСтрока(СтрокаЧисло) Тогда
		Возврат 0;
	Иначе
		Возврат Число(СтрокаЧисло);
	КонецЕсли;
КонецФункции

Функция ПолучитьДатуИзСтроки(СтрокаДата)
	СтрокаДата = СтрЗаменить(СокрЛП(СтрокаДата), ".", Символы.ПС);
	День  = СтрПолучитьСтроку(СтрокаДата, 1);
	Месяц = СтрПолучитьСтроку(СтрокаДата, 2);
	Год   = СтрПолучитьСтроку(СтрокаДата, 3);
	Возврат Дата(Год + Месяц + День);
КонецФункции

Процедура СформироватьОтчетОРозничныхПродажах(СтруктураПараметры)
	Перем РозничнаяТорговляОблагаетсяЕНВД;
	
	ТЗПродажи 	= СтруктураПараметры.ТЗПродажи;
	ТЗОплаты 	= СтруктураПараметры.ТЗОплаты; 

	МассивДат = ТЗПродажи.ВыгрузитьКолонку("Дата");
	МассивДат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДат);
	МассивДат = УпорядочитьМассив(МассивДат);
	
	НачатьТранзакцию();
	
	МассивДокументовКПроведению = Новый Массив;
	
	Если ЗначениеЗаполнено(СтруктураПараметры.ДатаКонца) И ЗначениеЗаполнено(СтруктураПараметры.Время) Тогда
		
		Время 			= СтруктураПараметры.Время;
		ДатаОтчета 		= СтруктураПараметры.ДатаКонца;
		ДатаДокумента 	= Дата(Год(ДатаОтчета), 
		Месяц(ДатаОтчета), 
		День(ДатаОтчета), 
		ВернутьВремя(Время, "Час"), ВернутьВремя(Время, "Мин"), ВернутьВремя(Время, "Сек"));
		
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметры.ДатаКонца) Тогда
		ДатаДокумента = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ДатаДокумента = КонецДня(ДатаДокумента);
	
	РежимПроведения = ?(НачалоДня(ДатаДокумента) = НачалоДня(ТекущаяДата()), 
	РежимПроведенияДокумента.Оперативный,
	РежимПроведенияДокумента.Неоперативный);
	
	Для Каждого ДатаОРП Из МассивДат Цикл
		
		ОРПСобственнаяПродукцияОбъект = СоздатьЗаполнитьОтчетОРозничныхПродажах(СтруктураПараметры, ДатаОРП);
		
		ПроизводствоБезЗаказаОбъект = СоздатьЗаполнитьПроизводствоБезЗаказа(ОРПСобственнаяПродукцияОбъект);
		
		ПеремещениеТоваровБлюдаОбъект 				= СоздатьЗаполнитьДокументПеремещениеТоваров(ОРПСобственнаяПродукцияОбъект);
		ПеремещениеТоваровБлюдаОбъект.Дата 			= НачалоДня(ОРПСобственнаяПродукцияОбъект.Дата) + 19.5 * 3600;
		ПеремещениеТоваровБлюдаОбъект.Комментарий 	= "/Перемещение блюд в розничный склад/";
		
		ПеремещениеТоваровПродукцияТоварыОбъект					= Документы.ПеремещениеТоваров.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ПеремещениеТоваровПродукцияТоварыОбъект, ПеремещениеТоваровБлюдаОбъект);
		ПеремещениеТоваровПродукцияТоварыОбъект.Дата 			= НачалоДня(ОРПСобственнаяПродукцияОбъект.Дата) + 20 * 3600;
		ПеремещениеТоваровПродукцияТоварыОбъект.Комментарий 	= "/Перемещение товаров в розничный склад/";
		
		РаспределитьТоварыИзОРППоПеремещениям(ОРПСобственнаяПродукцияОбъект,
		ПеремещениеТоваровБлюдаОбъект,
		ПеремещениеТоваровПродукцияТоварыОбъект);
		
		Если ПроизводствоБезЗаказаОбъект.ВыходныеИзделия.Количество() Тогда		
			ЗаписатьИДобавитьКПроведению(ПроизводствоБезЗаказаОбъект, МассивДокументовКПроведению);
		КонецЕсли;
		
		ПеремещениеТоваровБлюдаОбъект.ДокументОснование = ПроизводствоБезЗаказаОбъект.Ссылка;
		
		Если ПеремещениеТоваровБлюдаОбъект.Товары.Количество()>0 Тогда
			ЗаписатьИДобавитьКПроведению(ПеремещениеТоваровБлюдаОбъект, МассивДокументовКПроведению);
		КонецЕсли;
		
		Если ПеремещениеТоваровПродукцияТоварыОбъект.Товары.Количество()>0 Тогда
			ЗаписатьИДобавитьКПроведению(ПеремещениеТоваровПродукцияТоварыОбъект, МассивДокументовКПроведению);
		КонецЕсли;
		
		ОРППокупнаяПродукцияОбъект = Неопределено;
		ПеренестиТоварыИОплатыИзОРПВОРП(ОРПСобственнаяПродукцияОбъект, ОРППокупнаяПродукцияОбъект);
		
		ЗаписатьИДобавитьКПроведению(ОРПСобственнаяПродукцияОбъект, МассивДокументовКПроведению);
		
		Если ОРППокупнаяПродукцияОбъект <> Неопределено И 
			ОРППокупнаяПродукцияОбъект.Товары.Количество() > 0 Тогда
			ЗаписатьИДобавитьКПроведению(ОРППокупнаяПродукцияОбъект, МассивДокументовКПроведению)
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТранзакцияАктивна() Тогда
		
		Объект.Документы.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	ПровестиДокументы(МассивДокументовКПроведению, РежимПроведения);
	
КонецПроцедуры

Функция ДобавитьДокументВСписок(Документ)
	
	НоваяСтрока 			= Объект.Документы.Добавить();
	НоваяСтрока.Документ 	= Документ.Ссылка;
	НоваяСтрока.Проведен 	= Документ.Проведен;
	
	Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		НоваяСтрока.Сумма = Документ.Товары.Итог("Сумма");
		НоваяСтрока.Склад = Документ.Склад;
	ИначеЕсли ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		НоваяСтрока.Сумма = 0;
	КонецЕсли;
	
КонецФункции

Функция ВернутьТоварПоКоду(КодТовара,ХарактеристикаНоменклатуры=Неопределено)
	
	//[EVMihaylov@1bit.com 31.08.21
	//УТОЧНИТЬ
	//Предложение: выгружать как доп. свойство
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ
	//|	Номенклатура.Ссылка
	//|ИЗ
	//|	Справочник.Номенклатура КАК Номенклатура
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	//|		ПО Номенклатура.Ссылка = КатегорииОбъектов.Объект
	//|			И (КатегорииОбъектов.Категория.Наименование = ""Выгружать на кассу в столовую"")
	//|ГДЕ
	//|	Номенклатура.Код = &Код");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКатегорияВыгружатьНаКассуВСтоловую
	|	И НоменклатураДополнительныеРеквизиты.Ссылка.Код = &Код
	|	И НоменклатураДополнительныеРеквизиты.Значение = ИСТИНА");
	//EVMihaylov@1bit.com 31.08.21]
	Запрос.УстановитьПараметр("Код", КодТовара);
	Запрос.УстановитьПараметр("СвойствоКатегорияВыгружатьНаКассуВСтоловую", СвойствоКатегорияВыгружатьНаКассуВСтоловую);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЕсли;
	
	КодТовара = Прав("000000000000000000000000000" + КодТовара, ДополнительныеПараметры.ДлинаКода); 
	Запрос.УстановитьПараметр("Код", КодТовара);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Код = &Код");
	Запрос.УстановитьПараметр("ПравилоОбмена", 	ПравилоОбменаВесовыеТовары);	
	Запрос.УстановитьПараметр("Код", 			Число(КодТовара));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ХарактеристикаНоменклатуры = ВыборкаДетальныеЗаписи.Характеристика;
		Возврат ВыборкаДетальныеЗаписи.Номенклатура;
		
	КонецЕсли;
	
	Сообщить(СтрШаблон("Товар с кодом %1 не найден!", КодТовара), СтатусСообщения.Важное);
	
КонецФункции

Функция ВернутьХарактеристикуПоКоду(КодРазреза)
	
	Разрезы = Справочники.ХарактеристикиНоменклатуры;
	НайденыйРазрез = Разрезы.НайтиПоКоду(КодРазреза);
	Если НайденыйРазрез = Разрезы.ПустаяСсылка() Тогда 
		
		Если СтрДлина(КодРазреза) < ДлинаКодаХарактреристики Тогда
			КодРазреза = Прав(СтрШаблон("000000000000000000000000000%1", КодРазреза), ДополнительныеПараметры.ДлинаКодаХарактреристики);  
		КонецЕсли;
		НайденыйРазрез = Разрезы.НайтиПоКоду(КодРазреза);
		
	КонецЕсли;
	Если НайденыйРазрез = Разрезы.ПустаяСсылка() Тогда 
		Сообщить(СтрШаблон("Характеристика с кодом %1 не найдена"), СтатусСообщения.Важное);
	КонецЕсли;                  
	Возврат НайденыйРазрез;
	
КонецФункции

Функция СоздатьОтчетОРозничныхПродажах(ОблагаетсяЕНВД, СтруктураПараметры)
	
	Если ЗначениеЗаполнено(СтруктураПараметры.ДатаКонца) И ЗначениеЗаполнено(СтруктураПараметры.Время) Тогда
		
		Время = СтруктураПараметры.Время;
		ДатаОтчета = СтруктураПараметры.ДатаКонца;
		ДатаДокумента = Дата(Год(ДатаОтчета), Месяц(ДатаОтчета), День(ДатаОтчета), ВернутьВремя(Время,"час"), ВернутьВремя(Время,"мин"), ВернутьВремя(Время,"сек"));
		
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметры.ДатаКонца) Тогда
		ДатаДокумента = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект             	= Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ОтчетОРозничныхПродажахОбъект.Дата        	= ДатаДокумента;
	ОтчетОРозничныхПродажахОбъект.Склад       	= СкладРозничный;
	ОтчетОРозничныхПродажахОбъект.Подразделение	= СкладРозничный.Подразделение;
	Если ЗначениеЗаполнено(СтруктураПараметры.ККМ) Тогда
		КассаККМ = СтруктураПараметры.ККМ; 
	Иначе
		КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли;
	ОтчетОРозничныхПродажахОбъект.КассаККМ    = КассаККМ;
	ОтчетОРозничныхПродажахОбъект.Организация = КассаККМ.Владелец;
	//[EVMihaylov@1bit.com 30.08.21  
	//УТОЧНИТЬ
	//ОтчетОРозничныхПродажахОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Поступление выручки от продажи  продукции собственного производства");
	//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ОтчетОРозничныхПродажахОбъект, "Продажа");
	//ОтчетОРозничныхПродажахОбъект.ПриИзмененииДоговораЭквайринга();
	//ОтчетОРозничныхПродажахОбъект.УчитыватьНДС     = Истина;
	//ОтчетОРозничныхПродажахОбъект.СуммаВключаетНДС = Истина;
	//EVMihaylov@1bit.com 30.08.21]
	
	Возврат ОтчетОРозничныхПродажахОбъект;
	
КонецФункции // СоздатьОтчетОРозничныхПродажах()

Функция ПодобратьСериюНоменклатурыПоОстатку(Номенклатура, ХарактеристикаНоменклатуры, Склад)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТоварыНаСкладахОстатки.Серия КАК Серия
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток УБЫВ");
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Характеристика", ХарактеристикаНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Серия;
	КонецЕсли;
	
	//[EVMihaylov@1bit.com 31.08.21
	//УТОЧНИТЬ
	//Запрос = Новый Запрос(
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	СерииНоменклатуры.Ссылка
	//|ИЗ
	//|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	//|ГДЕ
	//|	СерииНоменклатуры.Владелец = &Владелец
	//|	И СерииНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	СерииНоменклатуры.ДатаПроизводства УБЫВ");		
	//Запрос.УстановитьПараметр("Владелец", Номенклатура);
	//Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СерииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерииНоменклатуры.ДатаПроизводства УБЫВ");
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	//EVMihaylov@1bit.com 31.08.21]
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;	
	
КонецФункции

Функция ПолучитьОсновнуюСпецификацию(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|ГДЕ
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СпецификацияНоменклатуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЗаписатьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажах)
	
	ОтчетОРозничныхПродажах.ДополнитьДокументЗначениямиПоУмолчанию();
	
	Попытка
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		Результат = Истина;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать документ """ + ОтчетОРозничныхПродажах + """."
		+ Символы.ПС + Символы.ПС + ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ЗаписатьОтчетОРозничныхПродажах()

Функция ВернутьВремя(СтрокаДата,Режим)
	
	Режим = ВРег(Режим);
	МассивВремя = СтрРазделить(СтрокаДата, ":");
	Час     = Число(МассивВремя[0]);
	Минута  = Число(МассивВремя[1]);
	Секунда = Число(МассивВремя[2]);
	Если Режим = "ЧАС" Тогда
		Возврат Час;
	ИначеЕсли Режим = "МИН" Тогда
		Возврат Минута;
	ИначеЕсли Режим = "СЕК" Тогда  
		Возврат Секунда;
	КонецЕсли;  	
	
КонецФункции

&НаСервере
Процедура ОтчетПроизводстваЗаСменуВыходныеИзделияОбработатьСтроку(ДокументОбъект, Строка, СтруктураПараметры)
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 			Строка.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 						Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", 	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 						Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 				Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", 		Новый Структура("ИмяФормы, ИмяТабличнойЧасти", Форма.ИмяФормы, ИмяТЧ));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", 				СтруктураПараметры.ПараметрыРаспределенияЗатрат);
	
	Если СтруктураПараметры.ИспользоватьПлановуюСтоимость Тогда
		
		СтруктураПараметров = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(ДокументОбъект);
		СтруктураПараметров.Вставить("ВидЦены", 			ДокументОбъект.ВидЦены);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", 	СтруктураПараметров);
		СтруктураДействий.Вставить("ПересчитатьСумму", 		"Количество");
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьНаправлениеВыпуска", Новый Структура);
	СтруктураДействий.ЗаполнитьНаправлениеВыпуска.Вставить("ИспользоватьСписаниеНаРасходы", СтруктураПараметры.ИспользоватьСписаниеНаРасходы);
	
	ИспользоватьНесколькоСкладов = СтруктураПараметры.ИспользоватьНесколькоСкладов;
	Если ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	Иначе
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьПолучателяПоНаправлениюВыпуска", Новый Структура);
	СтруктураДействий.ЗаполнитьПолучателяПоНаправлениюВыпуска.Вставить("Подразделение", ДокументОбъект.Подразделение);
	СтруктураДействий.ЗаполнитьПолучателяПоНаправлениюВыпуска.Вставить("ИспользоватьНесколькоСкладов", ИспользоватьНесколькоСкладов);
	СтруктураДействий.ЗаполнитьПолучателяПоНаправлениюВыпуска.Вставить("СкладПоУмолчанию", СкладПоУмолчанию);
	
	ИмяПоляСклад = "Склад";
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура);
	СтруктураДействий.ЗаполнитьПризнакЦеховаяКладовая.Вставить("ИмяПоляСклад", ИмяПоляСклад);
	СтруктураДействий.ЗаполнитьПризнакЦеховаяКладовая.Вставить("ЗаполнитьПодразделение", Истина);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	Если СтруктураПараметры.ИспользоватьПлановуюСтоимость Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий", Строка.Получатель, СтруктураПараметры.ПараметрыУказанияСерий["ВыходныеИзделия"]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);

	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(ДокументОбъект, Документы.ПроизводствоБезЗаказа);
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора["Объект.ВыходныеИзделия.Спецификация"].Удалить("НаправлениеДеятельности");
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора["Объект.ВыходныеИзделия.Спецификация"].Удалить("НачалоПроизводства");
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора["Объект.ВыходныеИзделия.Спецификация"].Удалить("ПодразделениеДиспетчер");
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
	ДокументОбъект, Строка, ПараметрыВыбораСпецификаций);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	СтрокаСтруктурой = Новый Структура;
	Колонки = ДокументОбъект.ВыходныеИзделия.Выгрузить().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		СтрокаСтруктурой.Вставить(Колонка.Имя);	
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, Строка);
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(СтрокаСтруктурой, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(Строка, ТекущаяСтрокаСтруктура);
	
	Строка.НомерГруппыЗатрат = Строка.НомерСтроки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий, ДополнительныеПараметрыЗаполнения)
	Перем СтруктураПараметровДействия;
	
	СтруктураПолейТЧ = Новый Структура;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуКиЗПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураКиЗ");
		СтруктураПолейТЧ.Вставить("ХарактеристикаКиЗ");
		СтруктураПолейТЧ.Вставить("ХарактеристикиКиЗИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.СтатьяРасходов);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.АналитикаРасходов);
		Для каждого Колонка Из СтруктураПараметровДействия.ДополнительныеКолонки Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия) Тогда
		Для каждого Колонка Из СтруктураПараметровДействия.КолонкиТабличнойЧасти Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеНастройкиСчетовУчета", СтруктураПараметровДействия) Тогда
		Для каждого Колонка Из СтруктураПараметровДействия.КолонкиТабличнойЧасти Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоПоРНПТ");
		СтруктураПолейТЧ.Вставить("ВедетсяУчетПоРНПТ");
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИмяПоляМестоХранения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", СтруктураПараметровДействия)
		И СтруктураПараметровДействия <> Неопределено 
		И СтруктураПараметровДействия.Свойство("НужноОкруглять")
		И ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
		СтруктураПолейТЧ.Вставить("НужноОкруглять");	
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("GTIN");
		
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоФакт", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"		  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиУпаковка") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиУпаковка);
		Иначе
			СтруктураПолейТЧ.Вставить("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСверхЗаказа") Тогда
		СтруктураПолейТЧ.Вставить("СуммаСНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСверхЗаказа", 0);
		СтруктураПолейТЧ.Вставить("КодСтроки", 1);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияРозничныхПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		
		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
		
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		
		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		
		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.СтатьяРасходов);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.АналитикаРасходов);
		
		Для каждого Колонка Из СтруктураПараметровДействия.ДополнительныеКолонки Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
		СтруктураПолейТЧ.Вставить("Склад");
	КонецЕсли;
	
	//++ НЕ УТКА
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
		СтруктураПолейТЧ.Вставить("Производится");
		СтруктураПолейТЧ.Вставить("Спецификация");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСкладПроизводства", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СписокПолей = СтрРазделить(СтруктураПараметровДействия.ИмяПоляСклад, ",");
		Для каждого ИмяПоляСклад Из СписокПолей Цикл
			СтруктураПолейТЧ.Вставить(ИмяПоляСклад);
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТКА
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		
		Если СтруктураДействий.ПроверитьЗаполнитьОбеспечение.Свойство("ПроверитьЗаполнитьНазначениеОтправителя") Тогда	
			СтруктураПолейТЧ.Вставить("НазначениеОтправителя")
		Иначе
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
		ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//++ НЕ УТ
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПередачиПродукцииДавальцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьЦенуВыпуска") Тогда
		СтруктураПолейТЧ.Вставить("ИспользоватьПлановуюСтоимость", Истина);
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Произведено");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьПризнакИспользованияПлановойСтоимости") Тогда
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("ИспользоватьПлановуюСтоимость", Ложь);
		СтруктураПолейТЧ.Вставить("ДатаПроизводства");
	КонецЕсли;		
	//-- НЕ УТКА
	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
			
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				Суффикс = НоменклатураКлиентСервер.СуффиксВИмениПоляСтатусУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство("Серия" + Суффикс) Тогда
					СтруктураПолейТЧ.Вставить("Серия" + Суффикс);
					СтруктураПолейТЧ.Вставить("Номенклатура" + Суффикс);
					СтруктураПолейТЧ.Вставить("Характеристика" + Суффикс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество, 0);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Назначение") Тогда
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДС");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДС");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
		СтруктураПолейТЧ.Вставить("ПоВинеСтороннейКомпании");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		СтруктураПолейТЧ.Вставить("Штрихкод");
		СтруктураПолейТЧ.Вставить("ШтрихкодНеОпределен");
		СтруктураПолейТЧ.Вставить("ЭтоУпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("УпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоЗаполненныхПодчиненныхПозиций");
		СтруктураПолейТЧ.Вставить("ТребуетсяОбработка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	ИмяРеквизитаОтгружатьОбособленно = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагОбособленноПоНазначению", ИмяРеквизитаОтгружатьОбособленно) Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить(ИмяРеквизитаОтгружатьОбособленно);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("НазначениеОтправителя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("КатегорияЭксплуатации");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("СпособПогашенияСтоимостиБУ");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия + "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("ДатаОтгрузкиОбязательна");
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуУслугиЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги"       , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСуммуЗаказДавальца),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСуммуЗаказДавальца), 0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги",                0);
		СтруктураПолейТЧ.Вставить("СуммаСобственныхМатериалов", 0);
		СтруктураПолейТЧ.Вставить("Сумма",                      0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации") Тогда
		
		СтруктураПолейТЧ.Вставить("ВариантОтражения");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
	КонецЕсли;
	
	//++ НЕ УТ
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСпецификацию", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
		
		СтруктураПолейТЧ.Вставить("Производится");
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ИмяПоляСпецификация);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДатуПроизводства") Тогда
		СтруктураПолейТЧ.Вставить("Отменено");
		СтруктураПолейТЧ.Вставить("Произведено");
		СтруктураПолейТЧ.Вставить("ДатаПроизводства");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЦеховаяКладовая", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить( 
		?(СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("ИмяПоляСклад"), 
		СтруктураПараметровДействия.ИмяПоляСклад,
		"Склад"));
		
		СтруктураПолейТЧ.Вставить("ЦеховаяКладовая");
		СтруктураПолейТЧ.Вставить("Подразделение");
		
		Если ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
			СтруктураПолейТЧ.Вставить("НужноОкруглять");	
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНаправлениеВыпуска", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("НаправлениеВыпуска");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПолучателяПоНаправлениюВыпуска", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("НаправлениеВыпуска");
		СтруктураПолейТЧ.Вставить("Получатель");	
	КонецЕсли;	
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьКлючСвязиСпецификации") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КлючСвязиСпецификация");
	КонецЕсли;
	//-- НЕ УТКА
	
	//++ НЕ УТ
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьДолюСтоимости", СтруктураПараметровДействия)
		ИЛИ СтруктураДействий.Свойство("ПересчитатьДолюСтоимости", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("ДоляСтоимости");
		СтруктураПолейТЧ.Вставить("ДоляСтоимостиНаЕдиницу");
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если СтруктураДействий.Свойство("ЗаполнитьНазначениеМатериалыВСтрокеСверхЗаказа") Тогда
		
		СтруктураПолейТЧ.Вставить("ЗаказДавальца");
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("КодСтроки");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		
	КонецЕсли;
	//-- НЕ УТКА
	
	//++ НЕ УТ
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаБезНДС");
		СтруктураПолейТЧ.Вставить("СуммаРегл");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПР") Тогда
		СтруктураПолейТЧ.Вставить("ПринимаетсяКНУ");
		СтруктураПолейТЧ.Вставить("СуммаРегл");
		СтруктураПолейТЧ.Вставить("СуммаПР");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНУ") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНУ");
		СтруктураПолейТЧ.Вставить("СуммаРегл");
		СтруктураПолейТЧ.Вставить("СуммаПР");
		СтруктураПолейТЧ.Вставить("СуммаВР");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуВР") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВР");
		СтруктураПолейТЧ.Вставить("СуммаРегл");
		СтруктураПолейТЧ.Вставить("СуммаНУ");
		СтруктураПолейТЧ.Вставить("СуммаПР");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипМестаХраненияПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("ТипМестаХранения");
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу") Тогда
		СтруктураПолейТЧ.Вставить("ДоступноОформлениеОтчетаДавальцу");
		СтруктураПолейТЧ.Вставить("ОформитьОтчетДавальцу");
		СтруктураПолейТЧ.Вставить("Назначение");
	КонецЕсли;
	//-- НЕ УТКА
	
	Если СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("НаправлениеДеятельности");
		СтруктураПолейТЧ.Вставить("Назначение");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизитыПоНазначению") Тогда
		
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНазначения");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках") Тогда
		
		СтруктураПолейТЧ.Вставить("Поставщик");
		СтруктураПолейТЧ.Вставить("ТипДокументаПриобретения");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ") Тогда
		
		СтруктураПолейТЧ.Вставить("Подразделение");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Если Не ДополнительныеПараметрыЗаполнения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ДополнительныеПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

&НаСервере
Функция ВидНоменклатурыБлюдо(Номенклатура)
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	Возврат ВидНоменклатуры = ДополнительныеПараметры.ВидыНоменклатуры["Блюдо бс бх"] Или
	ВидНоменклатуры = ДополнительныеПараметры.ВидыНоменклатуры["Блюдо сс бх"];
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыПоОстаткамНаСервере()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Остаток
	|ПОМЕСТИТЬ ВТ_ТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_КатегорияВыгружатьВСтоловую
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ТоварыНаСкладах.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТ_ТоварыНаСкладах КАК ВТ_ТоварыНаСкладах)
	|	И НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКатегорияОбъекта
	|	И НоменклатураДополнительныеРеквизиты.Значение = &КатегорияОбъектаВыгружатьНаКассуВСтоловую
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ВТ_ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ВТ_ТоварыНаСкладах.Остаток КАК Остаток
	|ПОМЕСТИТЬ ВТ_Товары_Итог
	|ИЗ
	|	ВТ_ТоварыНаСкладах КАК ВТ_ТоварыНаСкладах
	|ГДЕ
	|	ВТ_ТоварыНаСкладах.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_КатегорияВыгружатьВСтоловую.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТ_КатегорияВыгружатьВСтоловую КАК ВТ_КатегорияВыгружатьВСтоловую)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары_Итог.Номенклатура КАК Номенклатура,
	|	ВТ_Товары_Итог.Характеристика КАК Характеристика,
	|	ВТ_Товары_Итог.Номенклатура.ЕдиницаИзмерения КАК Ед,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВТ_Товары_Итог.Остаток КАК Остаток,
	|	ВТ_Товары_Итог.Номенклатура.Артикул КАК Артикул,
	|	ВТ_Товары_Итог.Номенклатура.Код КАК Код
	|ИЗ
	|	ВТ_Товары_Итог КАК ВТ_Товары_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				,
	|				(Номенклатура, ВидЦены) В
	|					(ВЫБРАТЬ
	|						ВТ_Товары_Итог.Номенклатура КАК Номенклатура,
	|						&ВидЦены КАК ВидЦены
	|					ИЗ
	|						ВТ_Товары_Итог КАК ВТ_Товары_Итог)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТ_Товары_Итог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВТ_Товары_Итог.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика");
	Запрос.УстановитьПараметр("СвойствоКатегорияОбъекта", 					СвойствоКатегорияОбъекта);
	Запрос.УстановитьПараметр("КатегорияОбъектаВыгружатьНаКассуВСтоловую", 	КатегорияОбъектаВыгружатьНаКассуВСтоловую);
	Запрос.УстановитьПараметр("Склад", 										Склад);
	Запрос.УстановитьПараметр("ВидЦены", 									ВидЦены);
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОстаткам(Команда)
	
	ПроверяемыеРеквизиты = Новый Соответствие;
	ПроверяемыеРеквизиты.Вставить("Склад", "Склад");
	ПроверяемыеРеквизиты.Вставить("СвойствоКатегорияВыгружатьНаКассуВСтоловую", "Свойство ""Категория: выгружать на кассу в столовую""");
	//ПроверяемыеРеквизиты.Вставить("СвойствоКатегорияОбъекта", "Свойство ""Категория объекта""");
	ПроверяемыеРеквизиты.Вставить("ВидЦены", "Вид цены");
	
	МассивНезаполненныеРеквизиты = Новый Массив;
	
	РеквизитыЗаполнены = Истина;
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(ЭтаФорма[Реквизит.Ключ]) Тогда
			МассивНезаполненныеРеквизиты.Добавить(Реквизит.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивНезаполненныеРеквизиты.Количество() Тогда
		
		ПоказатьПредупреждение(,
		СтрШаблон("Не заполнены реквизиты: %1%2", Символы.ПС, СтрСоединить(МассивНезаполненныеРеквизиты, ", ")));
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТоварыПоОстаткамВопросЗавершение", ЭтаФорма), 
		"Очистить таблицу с товарами?", 
		РежимДиалогаВопрос.ДаНетОтмена);
	Иначе	
		ЗаполнитьТоварыПоОстаткамНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОстаткамВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 	
	
	ЗаполнитьТоварыПоОстаткамНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВсеДанныеНаКассыНаСервере()
	
	КассыКВыгрузке = Объект.Кассы.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если Не КассыКВыгрузке.Количество() Тогда
		Возврат;	
	КонецЕсли;
	
	СЗТовары = Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	ТЗТовары 			= СформироватьТоварыКЗагрузке(СЗТовары);
	ТЗХарактеристики 	= СформироватьХарактеристикиКЗагрузке(СЗТовары);
	ТЗШтрихкоды     	= СформироватьШККЗагрузке(СЗТовары);
	
	Файл = СформироватьФайлЗагрузки(ТЗТовары, ТЗХарактеристики, ТЗШтрихкоды, ОчиститьККМ);
	
	Для Каждого КассовыйУзел из КассыКВыгрузке Цикл
		
		Если КассовыйУзел.Пометка Тогда
			
			ДанныеУстройства = Справочники.ПодключаемоеОборудование.ПолучитьДанныеУстройства(КассовыйУзел.ПодключаемоеОборудование).Параметры;
			Если ЗначениеЗаполнено(ДанныеУстройства.БазаТоваров)Тогда
				
				ФайлФлаг = Новый Файл(ДанныеУстройства.ФлагВыгрузки);
				Если ФайлФлаг.Существует() Тогда
					Сообщить(СтрШаблон("Касса %1 уже занята загрузкой файла %2", 
					КассовыйУзел.ПодключаемоеОборудование, ДанныеУстройства.БазаТоваров), 
					СтатусСообщения.Важное);
				Иначе	
					
					Попытка
						
						ТекстФлаг = Новый ТекстовыйДокумент;
						ТекстФлаг.Записать(ДанныеУстройства.ФлагВыгрузки, КодировкаТекста.ANSI);
						Файл.Записать(ДанныеУстройства.БазаТоваров, КодировкаТекста.ANSI);
						Сообщить(СтрШаблон("Файл %1 успешно выгружен на кассу %2", 
						ДанныеУстройства.БазаТоваров, КассовыйУзел.ПодключаемоеОборудование));
						
					Исключение
						
						ИнфомрацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Сообщить(СтрШаблон("Не удалось выгрузить файл %1 на кассу %2: %3", 
						ДанныеУстройства.БазаТоваров, КассовыйУзел.ПодключаемоеОборудование, ИнфомрацияОбОшибке));
						
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьВсеДанныеНаКассы(Команда)
	
	Если Не Объект.Товары.Количество() Тогда
		
		ПоказатьПредупреждение(, "Нет товаров к выгрузке");	
		Возврат;
		
	КонецЕсли;
	ВыгрузитьВсеДанныеНаКассыНаСервере();
	
КонецПроцедуры

&НаСервере
Функция СформироватьТоварыКЗагрузке(СЗТовары)
	
	СвойствоВесовой = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура_Весовой");
	
	ТаблицаТоваровкВыгрузке = Новый ТаблицаЗначений;
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("Товар");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("Код");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("Наименование");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("НаименованиеПолное");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("Цена");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("Остаток");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("ЭтоГруппа");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("ИспХарктеристики");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("КодРодителя");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("Артикул");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("ВесовойТовар");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("ККМ");
	ТаблицаТоваровкВыгрузке.Колонки.Добавить("СтавкаНДС");
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Родитель КАК Товар
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|ИТОГИ ПО
	|	Товар ТОЛЬКО ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ");	
	Запрос.УстановитьПараметр("Товары", СЗТовары);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваровкВыгрузке.Добавить();
		
		НоваяСтрока.Товар              = Выборка.Товар;
		НоваяСтрока.Код                = Выборка.Товар.Код;
		НоваяСтрока.Наименование       = Выборка.Товар.Наименование;
		НоваяСтрока.НаименованиеПолное = Выборка.Товар.Наименование;
		НоваяСтрока.ЭтоГруппа          = Выборка.Товар.ЭтоГруппа;
		НоваяСтрока.КодРодителя        = Выборка.Товар.Родитель.Код;
		
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Номенклатура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Номенклатура, 
		"Ссылка, Наименование, ЭтоГруппа, Родитель, ВидНоменклатуры, ВесИспользовать, СтавкаНДС");
		Номенклатура.Вставить("ИспользованиеХарактеристик", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ВидНоменклатуры, "ИспользованиеХарактеристик"));
		Номенклатура.Вставить("КодРодителя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.Родитель, "Код"));
		
		НоваяСтрока 						= ТаблицаТоваровкВыгрузке.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Цена, Остаток, Артикул");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Номенклатура, "Наименование, ЭтоГруппа, КодРодителя, СтавкаНДС");
		
		НоваяСтрока.Товар              	= Номенклатура.Ссылка;
		НоваяСтрока.Код                	= ?(Строка.КодВесовогоТовара = "", Строка.Код, Строка.КодВесовогоТовара);
		НоваяСтрока.НаименованиеПолное 	= Номенклатура.Наименование +
		?(ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры), " " + Строка(Строка.ХарактеристикаНоменклатуры), "");
		НоваяСтрока.ИспХарктеристики   	= ?(Не(Номенклатура.ЭтоГруппа), Номенклатура.ИспользованиеХарактеристик, Ложь);
		НоваяСтрока.ВесовойТовар       	= ?(Не(Номенклатура.ЭтоГруппа) И 
		УправлениеСвойствами.ЗначениеСвойства(Номенклатура.Ссылка, СвойствоВесовой) = Истина, 
		1, 
		0);
		НоваяСтрока.ККМ                	= "";
		
	КонецЦикла;
	
	Возврат ТаблицаТоваровкВыгрузке;
	
КонецФункции

&НаСервере
Функция СформироватьХарактеристикиКЗагрузке(СЗТовары)
	
	ТаблицаХарактеристик = Новый ТаблицаЗначений;
	ТаблицаХарактеристик.Колонки.Добавить("КодРазреза");
	ТаблицаХарактеристик.Колонки.Добавить("Наименование");
	ТаблицаХарактеристик.Колонки.Добавить("КодТовара");
	ТаблицаХарактеристик.Колонки.Добавить("Цена");
	ТаблицаХарактеристик.Колонки.Добавить("Остаток");
	Возврат ТаблицаХарактеристик; 
	
КонецФункции

&НаСервере
Функция СформироватьШККЗагрузке(СЗТовары)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
	|ПОМЕСТИТЬ ВТКодыВесовыхТоваров
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура В(&СЗНоменклатура)
	|	И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК ШК,
	|	ШтрихкодыНоменклатуры.Номенклатура.Код КАК Код,
	|	ЕСТЬNULL(ВТКодыВесовыхТоваров.Код, """") КАК КодВесовогоТовара,
	|	ШтрихкодыНоменклатуры.Упаковка.Числитель КАК Коэффициент,
	|	0 КАК КодРазрез
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыВесовыхТоваров КАК ВТКодыВесовыхТоваров
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТКодыВесовыхТоваров.Номенклатура
	|			И ШтрихкодыНоменклатуры.Характеристика = ВТКодыВесовыхТоваров.Характеристика
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В(&СЗНоменклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВесовогоТовара");
	Запрос.УстановитьПараметр("ПравилоОбмена", 	ПравилоОбменаВесовыеТовары);
	Запрос.УстановитьПараметр("СЗНоменклатура", СЗТовары);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СформироватьФайлЗагрузки(Товары, Разрезы, ШтрихКоды, ОчиститьККМ)
	
	Разделитель = ДополнительныеПараметры.Разделитель;
	
	Текст = Новый ТекстовыйДокумент();
	Текст.ДобавитьСтроку("##@@&&");
	Текст.ДобавитьСтроку("#");
	Если ОчиститьККМ Тогда
		
		Текст.ДобавитьСтроку("$$$DELETEALLWARES");
		Текст.ДобавитьСтроку("$$$DELETEALLBARCODES");
		Текст.ДобавитьСтроку("$$$DELETEALLASPECTREMAINS");
		
	КонецЕсли;
	Текст.ДобавитьСтроку("$$$DELETEALLCLASSIFIERLINKS");
	Текст.ДобавитьСтроку("$$$DELETEALLCLASSIFIERS");
	
	Если Разрезы.Количество() > 0 Тогда 
		// схемы разрезов
		Текст.ДобавитьСтроку("$$$ADDASPECTSCHMS");
		Текст.ДобавитьСтроку(СтрШаблон("1%1Характеристики%1Характеристики%1", Разделитель));
		// разрезы
		Текст.ДобавитьСтроку("$$$ADDASPECTS");
		Текст.ДобавитьСтроку("1"+Разделитель+"1"+Разделитель+"Характеристики"+Разделитель+"Характеристики"+Разделитель);
		// значения разрезов
		Текст.ДобавитьСтроку("$$$ADDASPECTVALUES");
		Для каждого ЭлРазрез из Разрезы Цикл
			Строка = "1"+Разделитель                                                    //
			+ "1"														 + Разделитель  // схема разрезов и разрез
			+ Формат(ЭлРазрез.КодРазреза, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")    + Разделитель  // Код
			+ СокрЛП(ЭлРазрез.Наименование)                              + Разделитель  // Наименование
			+ СокрЛП(ЭлРазрез.Наименование)           		             + Разделитель  // Наименование в чеке
			+ ""														 + Разделитель; // карта разреза
			Текст.ДобавитьСтроку(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда 
		
		Текст.ДобавитьСтроку("$$$REPLACEQUANTITYWITHOUTSALE");
		Для каждого ЭлТовар из Товары Цикл
			
			Если Не ЗначениеЗаполнено(ЭлТовар.Товар) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				Строка = Формат(Число(ЭлТовар.Код), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")      + Разделитель // Код
				+ ""				                                    + Разделитель // Штрих-код
				+ СокрЛП(ЭлТовар.НаименованиеПолное)                   	+ Разделитель // Наименование
				+ СокрЛП(ЭлТовар.Наименование)                         	+ Разделитель // Текст для чека
				+ Формат(ЭлТовар.Цена, "ЧЦ=8; ЧДЦ=2; ЧН=0; ЧГ=0")     	+ Разделитель // Цена
				+ Формат(ЭлТовар.Остаток,"ЧЦ=7; ЧДЦ=3; ЧГ=")           	+ Разделитель // Остаток
				+ "0"                                                  	+ Разделитель // Схема внутренней автоматической скидки
				+ СокрЛП(ЭлТовар.ВесовойТовар)				                          // Флаги через запятую:
				// • дробное количество (весовой)
				// • продажа
				// • возврат
				// • отрицательные остатки
				// • без ввода количества
				// • списание остатков
				// • редактирование цены
				// • ввод количества вручную
				+ ",1,1,0,0,0," + ?(ЭлТовар.Цена = 0, "1", "0") + ",1" 	+ Разделитель
				+ ""                                                   	+ Разделитель // Минимальная цена
				+ ""                                                   	+ Разделитель // Срок годности
				+ ""                                                  	+ Разделитель // Код схемы разрезов
				+ ""                                                  	+ Разделитель // Вариант использования разрезов:
				//  0 – полный список
				//  1 – заданный список
				//  2 – заданный список с остатком
				+ ""                                                   	+ Разделитель // Код схемы внешней автоматической скидки
				+ Формат(?(ЭлТовар.ЭтоГруппа,"","1"), "ЧЦ=7; ЧДЦ=3; ЧН=0; ЧГ=0")
				+ Разделитель // Коэффициент
				+ ""                                                   	+ Разделитель // Код базового товара
				+ Формат(Число(ЭлТовар.КодРодителя), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0")+ Разделитель // Код родительской группы
				+ ?(ЭлТовар.ЭтоГруппа, 0, 1)                           	+ Разделитель // Товар или группа: для товара «1» Товар или группа: для группы «0»
				+ ""                                                   	+ Разделитель // Номер уровня иерархического списка
				+ ""                                                  	+ Разделитель // Код значения первого разреза схемы с кодом «1»
				+ ""								                    + Разделитель // Серия
				+ ""                                                   	+ Разделитель // Сертификат
				+ ""                                                   	+ Разделитель // Код ККМ
				//САС 18.12.2018 Ставка НДС
				//+ ""                                                   + Разделитель // Код налоговой группы
				+ ПолучитьКодНалоговойГруппы(ЭлТовар.СтавкаНДС) + Разделитель // Код налоговой группы
				//-САС
				+ ""                                                   	+ Разделитель // Код весов с ПЭ
				+ ""                      							    + Разделитель // Код товара в весах ПЭ
				+ ?(ЭлТовар.ЭтоГруппа, "", ЭлТовар.Артикул)				+ Разделитель // Артикул
				+ ""                                                   	+ Разделитель // Тип скидки/надбавки:
				//  0 – процентная скидка
				//  1 – скидка суммой
				//  2 – процентная надбавка
				//  3 – надбавка суммой
				+ ""                                                   	+ Разделитель // Значение товарной скидки/надбавки
				+ ""                                                   	+ Разделитель // Максимальная скидка, %
				+ ""                                                   	+ Разделитель // Код принтера чеков
				+ ""                                                   	+ Разделитель // Файл *.bmp с картинкой
				+ ""                                                   	+ Разделитель // Описание
				+ "";
				// Кратность количества
				
			Исключение
				
				ТекстОшибки = СтрШаблон("ОШИБКА: не удалось выгрузить номенклатуру %1: %2", 
				ЭлТовар.Товар,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Сообщить(ТекстОшибки);
				
			КонецПопытки;
			
			Текст.ДобавитьСтроку(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ШтрихКоды.Количество() > 0 Тогда 
		
		Текст.ДобавитьСтроку("$$$ADDBARCODES");
		Для каждого ЭлШК из ШтрихКоды Цикл
			Строка =  Формат(ЭлШК.ШК, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + Разделитель // ШК
			+ Формат(?(ЗначениеЗаполнено(ЭлШК.КодВесовогоТовара), Формат(ЭлШК.КодВесовогоТовара, "ЧГ="), ЭлШК.КодТовара), "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + Разделитель // КодТовара
			+ СокрЛП(ЭлШК.КодРазрез) + Разделитель // Разрез
			+ СокрЛП(ЭлШК.Коэффициент) + Разделитель;// Коэффициент
			Текст.ДобавитьСтроку(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Разрезы.Количество() > 0 Тогда 
		
		Текст.ДобавитьСтроку("$$$REPLACEASPECTREMAINSWITHOUTSALE");
		Для каждого ЭлРазрез из Разрезы Цикл
			Строка =  Формат(ЭлРазрез.КодТовара, "ЧЦ=20; ЧДЦ=0; ЧН=0; ЧГ=0") + Разделитель // Код товара
			+ Формат(ЭлРазрез.Остаток, "ЧЦ=8; ЧДЦ=3; ЧН=0; ЧГ=0")    + Разделитель // Остаток
			+ СокрЛП(ЭлРазрез.КодРазреза)                            + Разделитель // Код разрезов
			+ Формат(ЭлРазрез.Цена, "ЧЦ=8; ЧДЦ=2; ЧГ=")              + Разделитель // Цена
			+ ""  													  + Разделитель // Тип скидки
			+ ""                           					      + Разделитель;// значение скидки
			Текст.ДобавитьСтроку(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	//САС
	ТекстКлассификаторы = Новый ТекстовыйДокумент();
	ТекстКлассификаторы.ДобавитьСтроку("$$$ADDCLASSIFIERS");					// Добавить классификаторы
	
	ТекстСвязьСКлассификаторами = Новый ТекстовыйДокумент();
	ТекстСвязьСКлассификаторами.ДобавитьСтроку("$$$ADDCLASSIFIERLINKS");		// Добавить связи с классификаторами
	
	ТекстКарты = Новый ТекстовыйДокумент();
	ТекстКарты.ДобавитьСтроку("$$$ADDCCARDDISCS");								// Добавить карты
	
	ТекстКлиенты= Новый ТекстовыйДокумент();
	ТекстКлиенты.ДобавитьСтроку("$$$ADDCLIENTDISCS");							// Добавить клиентов
	
	ТекстСвязьКартыСКлиентом= Новый ТекстовыйДокумент();
	ТекстСвязьКартыСКлиентом.ДобавитьСтроку("$$$ADDCLIENTCCARDS");				// Добавить связь карты с клиентом
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизиты.Ссылка.Код КАК ПЛУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКоличествоОплачиваемоеТалономНаМолоко
	|				ТОГДА НоменклатураДополнительныеРеквизиты.Значение
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Значение
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	(НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКатегорияОплачиваетсяТалономНаМолоко
	|			ИЛИ НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКоличествоОплачиваемоеТалономНаМолоко)
	|	И НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураДополнительныеРеквизиты.Ссылка,
	|	НоменклатураДополнительныеРеквизиты.Ссылка.Код
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКатегорияОплачиваетсяТалономНаМолоко
	|				ТОГДА НоменклатураДополнительныеРеквизиты.Значение
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.ПЛУ КАК ПЛУ,
	|	ВТ.Значение КАК Значение
	|ИЗ
	|	ВТ КАК ВТ
	|ИТОГИ ПО
	|	Значение");
	Запрос.УстановитьПараметр("СвойствоКатегорияОплачиваетсяТалономНаМолоко", СвойствоКатегорияОплачиваетсяТалономНаМолоко);
	Запрос.УстановитьПараметр("СвойствоКоличествоОплачиваемоеТалономНаМолоко", СвойствоКоличествоОплачиваемоеТалономНаМолоко);
	Результат = Запрос.Выполнить();
	ВыборкаКлассификатор = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Значение");
	КодКлассификатора = 1;
	Пока ВыборкаКлассификатор.Следующий() Цикл
		
		ТекстКлассификаторы.ДобавитьСтроку(Строка(КодКлассификатора) + ";;;Оплачивается талоном на молоко;" + СтрЗаменить(Строка(ВыборкаКлассификатор.Значение), ",", "."));
		ВыборкаДетальныеЗаписи = ВыборкаКлассификатор.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстСвязьСКлассификаторами.ДобавитьСтроку(Строка(КодКлассификатора) + ";1;" + Формат(Число(ВыборкаДетальныеЗаписи.ПЛУ), "ЧГ="));
		КонецЦикла;
		КодКлассификатора = КодКлассификатора+1;
		
	КонецЦикла;
	
	ТекстКлассификаторы.ДобавитьСтроку("999;;;Студенты;Студенты");
	
	ТЗ = ПолучитьТЗКартыСотрудниковИзЗУП();
	Для Каждого Строка Из ТЗ Цикл
		
		КодКарты 	= Формат(1073741824 + ПолучитьHash(Строка.Карта), "ЧГ=");
		КодКлиента 	= Формат(1073741824 + ПолучитьHash(Строка.ТабельныйНомер), "ЧГ=");
		
		ТекстКарты.ДобавитьСтроку(Строка(КодКарты) + ";1;" + Строка.Карта + ";;;1");
		ТекстКлиенты.ДобавитьСтроку(Строка(КодКлиента) + ";0;" + Строка.ФИО + ";" + Строка.ФИО + ";;;;;;;;;;;;;;" + Строка.ТабельныйНомер);
		ТекстСвязьКартыСКлиентом.ДобавитьСтроку(Строка(КодКлиента) + ";1;" + Строка(КодКарты));
		Если Строка.ЭтоСтудент Тогда
			ТекстСвязьСКлассификаторами.ДобавитьСтроку("999;2;" + Строка(КодКлиента));
		КонецЕсли;
		
	КонецЦикла;		
	
	Текст.ДобавитьСтроку(ТекстКлассификаторы.ПолучитьТекст());
	Текст.ДобавитьСтроку(ТекстКарты.ПолучитьТекст());
	Текст.ДобавитьСтроку(ТекстКлиенты.ПолучитьТекст());
	Текст.ДобавитьСтроку(ТекстСвязьКартыСКлиентом.ПолучитьТекст());
	Текст.ДобавитьСтроку(ТекстСвязьСКлассификаторами.ПолучитьТекст());
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьТЗКартыСотрудниковИзЗУП();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ФИО");
	ТЗ.Колонки.Добавить("ТабельныйНомер");
	ТЗ.Колонки.Добавить("Карта");
	ТЗ.Колонки.Добавить("ЭтоСтудент");
	
	ИнформационнаяБазаCOM = ПолучитьПодключениеПоCOM();
	Если ИнформационнаяБазаCOM <> Неопределено Тогда
		
		ЗапросCOM = ИнформационнаяБазаCOM.NewObject("Запрос");
		ЗапросCOM.Текст = "ВЫБРАТЬ
		|	бит_КартыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	бит_КартыСотрудниковСрезПоследних.Карта КАК Карта,
		|	бит_КартыСотрудниковСрезПоследних.Активна КАК Активна
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	РегистрСведений.бит_КартыСотрудников.СрезПоследних КАК бит_КартыСотрудниковСрезПоследних
		|ГДЕ 
		|	бит_КартыСотрудниковСрезПоследних.Активна = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДолжностиДополнительныеРеквизиты.Ссылка КАК Должность
		|ПОМЕСТИТЬ ВТДолжностьЭтоСтудент
		|ИЗ
		|	Справочник.Должности.ДополнительныеРеквизиты КАК ДолжностиДополнительныеРеквизиты
		|ГДЕ
		|	ДолжностиДополнительныеРеквизиты.Свойство.Имя = ""Должность_ЭтоСтудент""
		|	И (ВЫРАЗИТЬ(ДолжностиДополнительныеРеквизиты.Значение КАК БУЛЕВО)) = ИСТИНА
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковИнтервальный.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСтуденты
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
		|ГДЕ
		|	&ТекущаяДата МЕЖДУ КадроваяИсторияСотрудниковИнтервальный.ДатаНачала И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания
		|	И КадроваяИсторияСотрудниковИнтервальный.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСотрудники.Сотрудник КАК Сотрудник
		|			ИЗ
		|				ВТСотрудники КАК ВТСотрудники)
		|	И КадроваяИсторияСотрудниковИнтервальный.Должность В
		|			(ВЫБРАТЬ
		|				ВТДолжностьЭтоСтудент.Должность КАК Должность
		|			ИЗ
		|				ВТДолжностьЭтоСтудент КАК ВТДолжностьЭтоСтудент)
		|;
		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСотрудники.Сотрудник.Наименование КАК ФИО,
		|	ВТСотрудники.Сотрудник.Код КАК ТабельныйНомер,
		|	ВТСотрудники.Карта КАК Карта,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТСтуденты.Сотрудник, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоСтудент
		|ИЗ
		|	ВТСотрудники КАК ВТСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтуденты КАК ВТСтуденты
		|		ПО ВТСотрудники.Сотрудник = ВТСтуденты.Сотрудник";
		ЗапросCOM.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Выборка = ЗапросCOM.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Выборка);	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьHash(СтрHash, Hash = 0, M = 31, РазмерТаблицы = 536870912)
	
	ДлинаСтроки = СтрДлина(СтрHash);
	Для нПоз = 1 По ДлинаСтроки Цикл
		Hash = M * Hash + КодСимвола(Сред(СтрHash, нПоз, 1));
	КонецЦикла;
	Возврат Hash % РазмерТаблицы;
	
КонецФункции

Функция ПолучитьКодНалоговойГруппы(СтавкаНДС)
	
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат "";
	КонецЕсли;
	
	ПеречислениеСтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "ПеречислениеСтавкаНДС");
	
	Если ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		Возврат "2";
	ИначеЕсли ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		Возврат "3";
	ИначеЕсли ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		Возврат "3";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКассуККМ(ПодключаемоеОборудование)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиРМККассыККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	Справочник.НастройкиРМК.КассыККМ КАК НастройкиРМККассыККМ
	|ГДЕ
	|	НастройкиРМККассыККМ.ПодключаемоеОборудование = &ПодключаемоеОборудование
	|	И НастройкиРМККассыККМ.Ссылка.РабочееМесто = &РабочееМесто");
	Запрос.УстановитьПараметр("РабочееМесто",				РабочееМесто);
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", 	ПодключаемоеОборудование);
	Запрос.УстановитьПараметр("ИмяКомпьютера", 				ИмяКомпьютера());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КассаККМ;	
	КонецЕсли;
	
	Возврат Справочники.КассыККМ.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТовары(Команда)
	ЗаполнитьТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыНаСервере()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_ВыгружатьНаКассуВСтоловую
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И НоменклатураДополнительныеРеквизиты.Ссылка.ЭтоГруппа = ЛОЖЬ
	|	И НоменклатураДополнительныеРеквизиты.Свойство = &СвойствоКатегорияВыгружатьНаКассуВСтоловую
	|	И (ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК БУЛЕВО)) = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТ_ВыгружатьНаКассуВСтоловую КАК ВТ_ВыгружатьНаКассуВСтоловую)
	|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Остаток
	|ПОМЕСТИТЬ ВТ_ТоварыНаСкладах
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТ_ВыгружатьНаКассуВСтоловую КАК ВТ_ВыгружатьНаКассуВСтоловую)
	|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код
	|ПОМЕСТИТЬ ВТ_КодыВесовогоТовара
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТ_ВыгружатьНаКассуВСтоловую КАК ВТ_ВыгружатьНаКассуВСтоловую)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ТоварыНаСкладах.Номенклатура, ВТ_ЦеныНоменклатуры.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_ТоварыНаСкладах.Характеристика, ВТ_ЦеныНоменклатуры.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТ_ТоварыНаСкладах.Остаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры_ТоварыНаСкладах
	|ИЗ
	|	ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТоварыНаСкладах КАК ВТ_ТоварыНаСкладах
	|		ПО ВТ_ЦеныНоменклатуры.Номенклатура = ВТ_ТоварыНаСкладах.Номенклатура
	|			И ВТ_ЦеныНоменклатуры.Характеристика = ВТ_ТоварыНаСкладах.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах.Номенклатура, ВТ_КодыВесовогоТовара.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах.Характеристика, ВТ_КодыВесовогоТовара.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах.Остаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВТ_КодыВесовогоТовара.Код, """") КАК КодВесовогоТовара
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара
	|ИЗ
	|	ВТ_ЦеныНоменклатуры_ТоварыНаСкладах КАК ВТ_ЦеныНоменклатуры_ТоварыНаСкладах
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_КодыВесовогоТовара КАК ВТ_КодыВесовогоТовара
	|		ПО ВТ_ЦеныНоменклатуры_ТоварыНаСкладах.Номенклатура = ВТ_КодыВесовогоТовара.Номенклатура
	|			И ВТ_ЦеныНоменклатуры_ТоварыНаСкладах.Характеристика = ВТ_КодыВесовогоТовара.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара.Характеристика, НЕОПРЕДЕЛЕНО) КАК ХарактеристикаНоменклатуры,
	|	ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура.ЕдиницаИзмерения КАК Ед,
	|	ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура.Код КАК Код,
	|	ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура.Артикул КАК Артикул,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара.Остаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара.КодВесовогоТовара, """") КАК КодВесовогоТовара
	|ИЗ
	|	ВТ_ВыгружатьНаКассуВСтоловую КАК ВТ_ВыгружатьНаКассуВСтоловую
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара КАК ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара
	|		ПО ВТ_ВыгружатьНаКассуВСтоловую.Номенклатура = ВТ_ЦеныНоменклатуры_ТоварыНаСкладах_КодыВесовогоТовара.Номенклатура");
	Запрос.УстановитьПараметр("СвойствоКатегорияВыгружатьНаКассуВСтоловую", СвойствоКатегорияВыгружатьНаКассуВСтоловую);
	Запрос.УстановитьПараметр("ВидЦены", 									ВидЦены);
	Запрос.УстановитьПараметр("Склад", 										Склад);
	Запрос.УстановитьПараметр("ПравилоОбмена", 								ПравилоОбменаВесовыеТовары);
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаполнитьДокументПеремещениеТоваров(ОтчетОРозничныхПродажахОбъект)
	
	ПеремещениеТоваровОбъект 						= Документы.ПеремещениеТоваров.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ПеремещениеТоваровОбъект, ОтчетОРозничныхПродажахОбъект, "Организация, Подразделение, Ответственный");
	ПеремещениеТоваровОбъект.СкладОтправитель 		= Склад;
	ПеремещениеТоваровОбъект.СкладПолучатель 		= СкладРозничный;
	ПеремещениеТоваровОбъект.Статус					= Перечисления.СтатусыПеремещенийТоваров.Принято;
	ПеремещениеТоваровОбъект.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ПеремещениеТоваровОбъект.ВариантПриемкиТоваров	= Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ПеремещениеТоваровОбъект.СпособДоставки			= Перечисления.СпособыДоставки.Самовывоз;
	
	Возврат ПеремещениеТоваровОбъект;	
	
КонецФункции

&НаСервере
Процедура ПеренестиТоварыИОплатыИзОРПВОРП(ОРПСобственнаяПродукцияОбъект, ОРППокупнаяПродукцияОбъект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВТТовары.Номенклатура КАК Номенклатура,
	|	ВТТовары.Характеристика КАК Характеристика,
	|	ВТТовары.Упаковка КАК Упаковка,
	|	ВТТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТТовары.Количество КАК Количество,
	|	ВТТовары.Цена КАК Цена,
	|	ВТТовары.Сумма КАК Сумма,
	|	ВТТовары.УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|	ВТТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВТТовары.СуммаНДС КАК СуммаНДС,
	|	ВТТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ВТТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ВТТовары.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	ВТТовары.КоличествоУпаковокУчет КАК КоличествоУпаковокУчет,
	|	ВТТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТТовары.Партнер КАК Партнер,
	|	ВТТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТТовары.Продавец КАК Продавец,
	|	ВТТовары.Помещение КАК Помещение,
	|	ВТТовары.Серия КАК Серия,
	|	ВТТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВТТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ВТТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВТТовары.АналитикаУчетаНаборов КАК АналитикаУчетаНаборов
	|ПОМЕСТИТЬ ВТ_ОтчетОРозничныхПродажах
	|ИЗ
	|	&ВТТовары КАК ВТТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_НоменклатурнаяГруппа_Покупная
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетОРозничныхПродажах КАК ВТ_ОтчетОРозничныхПродажах
	|		ПО НоменклатураДополнительныеРеквизиты.Ссылка = ВТ_ОтчетОРозничныхПродажах.Номенклатура
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство.Имя = ""Номенклатура_НоменклатурнаяГруппа""
	|	И ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК Справочник.ЗначенияСвойствОбъектов).Наименование = ""Покупная""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетОРозничныхПродажах.Номенклатура КАК Номенклатура,
	|	ВТ_ОтчетОРозничныхПродажах.Характеристика КАК Характеристика,
	|	ВТ_ОтчетОРозничныхПродажах.Упаковка КАК Упаковка,
	|	ВТ_ОтчетОРозничныхПродажах.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_ОтчетОРозничныхПродажах.Количество КАК Количество,
	|	ВТ_ОтчетОРозничныхПродажах.Цена КАК Цена,
	|	ВТ_ОтчетОРозничныхПродажах.Сумма КАК Сумма,
	|	ВТ_ОтчетОРозничныхПродажах.УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|	ВТ_ОтчетОРозничныхПродажах.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_ОтчетОРозничныхПродажах.СуммаНДС КАК СуммаНДС,
	|	ВТ_ОтчетОРозничныхПродажах.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ВТ_ОтчетОРозничныхПродажах.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ВТ_ОтчетОРозничныхПродажах.КоличествоУпаковокФакт КАК КоличествоУпаковокФакт,
	|	ВТ_ОтчетОРозничныхПродажах.КоличествоУпаковокУчет КАК КоличествоУпаковокУчет,
	|	ВТ_ОтчетОРозничныхПродажах.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ВТ_ОтчетОРозничныхПродажах.Партнер КАК Партнер,
	|	ВТ_ОтчетОРозничныхПродажах.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВТ_ОтчетОРозничныхПродажах.Продавец КАК Продавец,
	|	ВТ_ОтчетОРозничныхПродажах.Помещение КАК Помещение,
	|	ВТ_ОтчетОРозничныхПродажах.Серия КАК Серия,
	|	ВТ_ОтчетОРозничныхПродажах.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВТ_ОтчетОРозничныхПродажах.НоменклатураНабора КАК НоменклатураНабора,
	|	ВТ_ОтчетОРозничныхПродажах.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВТ_ОтчетОРозничныхПродажах.АналитикаУчетаНаборов КАК АналитикаУчетаНаборов
	|ИЗ
	|	ВТ_ОтчетОРозничныхПродажах КАК ВТ_ОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатурнаяГруппа_Покупная КАК ВТ_НоменклатурнаяГруппа_Покупная
	|		ПО ВТ_ОтчетОРозничныхПродажах.Номенклатура = ВТ_НоменклатурнаяГруппа_Покупная.Номенклатура");
	Запрос.УстановитьПараметр("ВТТовары", ОРПСобственнаяПродукцияОбъект.Товары.Выгрузить());
	РезультатНоменклатураПокупная = Запрос.Выполнить();
	Если Не РезультатНоменклатураПокупная.Пустой() Тогда
		
		ОРППокупнаяПродукцияОбъект 									= ОРПСобственнаяПродукцияОбъект.Скопировать();
		ОРППокупнаяПродукцияОбъект.Дата 							= ОРПСобственнаяПродукцияОбъект.Дата;
		ОРППокупнаяПродукцияОбъект.Товары.Очистить();
		ОРППокупнаяПродукцияОбъект.ОплатаПлатежнымиКартами.Очистить();
		ОРППокупнаяПродукцияОбъект.битзпф_ОплатаПрочимиТипами.Очистить();
		ОРППокупнаяПродукцияОбъект.Товары.Загрузить(РезультатНоменклатураПокупная.Выгрузить());
		
		Для Каждого Строка Из ОРППокупнаяПродукцияОбъект.Товары Цикл
			
			НайденныеСтроки = ОРПСобственнаяПродукцияОбъект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ОРПСобственнаяПродукцияОбъект.Товары.Удалить(НайденнаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
		СобственнаяПродукцияСумма	= ОРПСобственнаяПродукцияОбъект.Товары.Итог("Сумма");
		ПокупнаяПродукцияСумма 		= ОРППокупнаяПродукцияОбъект.Товары.Итог("Сумма");
		
		СобственнаяПродукцияОплатаПлатежнымиКартами			= ОРПСобственнаяПродукцияОбъект.ОплатаПлатежнымиКартами.Итог("Сумма");
		
		Если ОРПСобственнаяПродукцияОбъект.ОплатаПлатежнымиКартами.Количество() Тогда
			
			СтрокаСобственнаяПродукцияОплатаПлатежнымиКартами 	= ОРПСобственнаяПродукцияОбъект.ОплатаПлатежнымиКартами[0];
			
			СобственнаяПродукцияОплатаПрочимиТипами		= ОРПСобственнаяПродукцияОбъект.битзпф_ОплатаПрочимиТипами.Итог("Сумма");
			
			СобственнаяПродукцияОплата = СобственнаяПродукцияОплатаПлатежнымиКартами + СобственнаяПродукцияОплатаПрочимиТипами;
			
			НеобходимоПеренести = СобственнаяПродукцияОплата - СобственнаяПродукцияСумма;
			
			СуммаКПереносу = Мин(НеобходимоПеренести, СтрокаСобственнаяПродукцияОплатаПлатежнымиКартами.Сумма);
			
			СтрокаСобственнаяПродукцияОплатаПлатежнымиКартами.Сумма = СтрокаСобственнаяПродукцияОплатаПлатежнымиКартами.Сумма - СуммаКПереносу;
			
			НоваяСтрока = ОРППокупнаяПродукцияОбъект.ОплатаПлатежнымиКартами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСобственнаяПродукцияОплатаПлатежнымиКартами, , "Сумма");
			НоваяСтрока.Сумма = СуммаКПереносу;
			
			НеобходимоПеренести = НеобходимоПеренести - СуммаКПереносу;
			
			Если СтрокаСобственнаяПродукцияОплатаПлатежнымиКартами.Сумма = 0 Тогда
				ОРПСобственнаяПродукцияОбъект.ОплатаПлатежнымиКартами.Удалить(СтрокаСобственнаяПродукцияОплатаПлатежнымиКартами);	
			КонецЕсли;
			
			Если НеобходимоПеренести > 0 Тогда
				
				МассивУдаляемыеСтроки = Новый Массив;
				Для Каждого Строка Из ОРПСобственнаяПродукцияОбъект.битзпф_ОплатаПрочимиТипами Цикл
					
					СуммаКПереносу = Мин(НеобходимоПеренести, Строка.Сумма);
					
					Строка.Сумма = Строка.Сумма - СуммаКПереносу;
					
					НоваяСтрока = ОРППокупнаяПродукцияОбъект.битзпф_ОплатаПрочимиТипами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.Сумма = СуммаКПереносу;
					
					Если Строка.Сумма = 0 Тогда
						МассивУдаляемыеСтроки.Добавить(Строка);	
					КонецЕсли;
					
					НеобходимоПеренести = НеобходимоПеренести - СуммаКПереносу;
					
					Если НеобходимоПеренести = 0 Тогда
						Прервать;	
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого УдаляемаяСтрока Из МассивУдаляемыеСтроки Цикл
					ОРПСобственнаяПродукцияОбъект.битзпф_ОплатаПрочимиТипами.Удалить(УдаляемаяСтрока);	
				КонецЦикла
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуПродаж()
	
	Отчет = Новый ТаблицаЗначений;
	Отчет.Колонки.Добавить("НомерККМ"           , Новый ОписаниеТипов("Число"));
	Отчет.Колонки.Добавить("Дата"               , Новый ОписаниеТипов("Дата"));
	Отчет.Колонки.Добавить("Время"              , Новый ОписаниеТипов("Строка"));
	Отчет.Колонки.Добавить("НомерДокумента"     , Новый ОписаниеТипов("Число"));
	Отчет.Колонки.Добавить("НомерСмены"         , Новый ОписаниеТипов("Число"));
	Отчет.Колонки.Добавить("Код"                , Новый ОписаниеТипов("Строка"));
	Отчет.Колонки.Добавить("Разрез"  	        , Новый ОписаниеТипов("Строка"));
	Отчет.Колонки.Добавить("Цена"               , Новый ОписаниеТипов("Число"));
	Отчет.Колонки.Добавить("Количество"         , Новый ОписаниеТипов("Число"));
	Отчет.Колонки.Добавить("Сумма"              , Новый ОписаниеТипов("Число"));
	Отчет.Колонки.Добавить("ФлагВозврата"       , Новый ОписаниеТипов("Число"));
	
	Возврат Отчет;
	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуОплат()
	
	Оплата = Новый ТаблицаЗначений;
	Оплата.Колонки.Добавить("НомерСмены"         , Новый ОписаниеТипов("Число"));
	Оплата.Колонки.Добавить("Дата"               , Новый ОписаниеТипов("Дата"));
	Оплата.Колонки.Добавить("Код"                , Новый ОписаниеТипов("Число"));
	Оплата.Колонки.Добавить("Сумма"     	     , Новый ОписаниеТипов("Число"));
	Оплата.Колонки.Добавить("Карта"		         , Новый ОписаниеТипов("Строка"));
	
	Возврат Оплата;
	
КонецФункции

&НаСервере
Функция ПолучитьЭквайринговыйТерминалПоПодразделению(Подразделение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминал
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Владелец.Подразделение = &Подразделение
	|	И ЭквайринговыеТерминалы.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.ЭквайринговыйТерминал, Справочники.ЭквайринговыеТерминалы.ПустаяСсылка());
	
КонецФункции

&НаСервере
Функция СоздатьЗаполнитьПроизводствоБезЗаказа(ОтчетОРозничныхПродажахОбъект)
	
	ПроизводствоБезЗаказаОбъект 											= Документы.ПроизводствоБезЗаказа.СоздатьДокумент();
	ПроизводствоБезЗаказаОбъект.Дата		 								= НачалоДня(ОтчетОРозничныхПродажахОбъект.Дата) + 19 * 3600;
	ПроизводствоБезЗаказаОбъект.УстановитьНовыйНомер();
	ПроизводствоБезЗаказаОбъект.Комментарий 								= "/Выпуск блюд/";
	ПроизводствоБезЗаказаОбъект.Организация 								= ОтчетОРозничныхПродажахОбъект.Организация;
	ПроизводствоБезЗаказаОбъект.Ответственный 								= ПараметрыСеанса.ТекущийПользователь;
	ПроизводствоБезЗаказаОбъект.Подразделение 								= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Подразделение");
	ПроизводствоБезЗаказаОбъект.ГруппировкаЗатрат							= Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям;
	ПроизводствоБезЗаказаОбъект.СпособРаспределенияЗатратНаВыходныеИзделия 	= Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	ПроизводствоБезЗаказаОбъект.Валюта 										= Константы.ВалютаРегламентированногоУчета.Получить();
	ПроизводствоБезЗаказаОбъект.ВидЦены										= ВидЦеныПБЗ;
	ПроизводствоБезЗаказаОбъект.ВыпускПодДеятельность						= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС; 
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ИспользоватьСписаниеНаРасходы",
	ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	СтруктураПараметры.Вставить("ИспользоватьНесколькоСкладов", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));
	СтруктураПараметры.Вставить("СкладПоУмолчанию", 
	?(СтруктураПараметры.ИспользоватьНесколькоСкладов, Справочники.Склады.ПустаяСсылка(), ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию()));
	СтруктураПараметры.Вставить("ИмяПоляСклад", "Получатель");
	СтруктураПараметры.Вставить("ПараметрыРаспределенияЗатрат", 
	Новый ФиксированнаяСтруктура(Документы.ПроизводствоБезЗаказа.ПараметрыРаспределенияЗатрат(ПроизводствоБезЗаказаОбъект)));
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
	"УчетнаяПолитикаФинансовогоУчета",
	ПроизводствоБезЗаказаОбъект.Организация,
	ПроизводствоБезЗаказаОбъект.Дата);
	
	Если НЕ ПараметрыУчетнойПолитики = Неопределено Тогда
		СтруктураПараметры.Вставить("ИспользоватьПлановуюСтоимость", ПараметрыУчетнойПолитики.УчетГотовойПродукцииПоПлановойСтоимости);
	КонецЕсли;
	
	СтруктураПараметры.Вставить("ПараметрыУказанияСерий", 
	Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ПроизводствоБезЗаказаОбъект, Документы.ПроизводствоБезЗаказа)));
		
	Для Каждого Строка Из ОтчетОРозничныхПродажахОбъект.Товары Цикл
		
		Если ВидНоменклатурыБлюдо(Строка.Номенклатура) Тогда
			
			НоваяСтрока 								= ПроизводствоБезЗаказаОбъект.ВыходныеИзделия.Добавить();
			НоваяСтрока.Номенклатура	 				= Строка.Номенклатура;
			НоваяСтрока.КоличествоУпаковок				= Строка.Количество;
			НоваяСтрока.Количество						= Строка.Количество;
			НоваяСтрока.Получатель						= Склад;
			НоваяСтрока.ДоляСтоимости					= 1;
			НоваяСтрока.НаправлениеВыпуска 				= Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			
			ОтчетПроизводстваЗаСменуВыходныеИзделияОбработатьСтроку(ПроизводствоБезЗаказаОбъект, НоваяСтрока, СтруктураПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПроизводствоБезЗаказаОбъект;
	
КонецФункции

&НаСервере
Процедура РаспределитьТоварыИзОРППоПеремещениям(ОтчетОРозничныхПродажахОбъект,
	ПеремещениеТоваровБлюдаОбъект,
	ПеремещениеТоваровПродукцияТоварыОбъект)
	
	Для Каждого СтрокаПродаж Из ОтчетОРозничныхПродажахОбъект.Товары Цикл
		
		Если ВидНоменклатурыБлюдо(СтрокаПродаж.Номенклатура) Тогда
			СтрокаТЧ = ПеремещениеТоваровБлюдаОбъект.Товары.Добавить();
		Иначе
			СтрокаТЧ = ПеремещениеТоваровПродукцияТоварыОбъект.Товары.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаПродаж);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИДобавитьКПроведению(ДокументОбъект, МассивДокументовКПроведению)
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДобавитьДокументВСписок(ДокументОбъект);
		МассивДокументовКПроведению.Добавить(ДокументОбъект);
		
	Исключение
		
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(СтрШаблон("Не удалось записать документ %1: %2", ДокументОбъект, ИнформацияОбОшибке));
		ОтменитьТранзакцию();
		
	КонецПопытки; 	
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументы(МассивДокументовКПроведению, РежимПроведения)
	
	Для Каждого ДокументКПроведению Из МассивДокументовКПроведению Цикл
		
		Попытка
			
			Если ДокументКПроведению.Метаданные().ОперативноеПроведение = 
				Метаданные.СвойстваОбъектов.ОперативноеПроведение.Запретить Тогда
				ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный)		
			Иначе	
				ДокументКПроведению.Записать(РежимЗаписиДокумента.Проведение, РежимПроведения);
			КонецЕсли;
			
		Исключение
			
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщить(СтрШаблон("Не удалось записать документ %1: %2", ДокументКПроведению.Ссылка, ИнформацияОбОшибке));
			ОтменитьТранзакцию = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаполнитьОтчетОРозничныхПродажах(СтруктураПараметры, Дата)
	
	ВалютаРубль = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТЗПродажи 	= СтруктураПараметры.ТЗПродажи;
	ТЗОплаты 	= СтруктураПараметры.ТЗОплаты;
	
	ОРПСобственнаяПродукцияОбъект             			= Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ОРПСобственнаяПродукцияОбъект.Дата					= КонецДня(Дата);
	ОРПСобственнаяПродукцияОбъект.Организация			= Организация;
	ОРПСобственнаяПродукцияОбъект.Склад       			= СкладРозничный;
	ОРПСобственнаяПродукцияОбъект.Подразделение			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладРозничный, "Подразделение");
	ОРПСобственнаяПродукцияОбъект.КассаККМ    			= СтруктураПараметры.ККМ;
	ОРПСобственнаяПродукцияОбъект.ЦенаВключаетНДС 		= Истина;
	ОРПСобственнаяПродукцияОбъект.ВидЦены				= ВидЦены;
	ОРПСобственнаяПродукцияОбъект.НалогообложениеНДС 	= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОРПСобственнаяПродукцияОбъект.Валюта				= ВалютаРубль;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ОРПСобственнаяПродукцияОбъект, 
	Документы.ОтчетОРозничныхПродажах));
	
	ТЗПродажи.Свернуть("Дата, Код, Разрез, Цена", "Количество, Сумма");
	
	НайденныеСтроки = ТЗПродажи.НайтиСтроки(Новый Структура("Дата", Дата));
	
	Для Каждого СтрокаОтчет Из НайденныеСтроки Цикл
		
		ХарактеристикаНоменклатуры = Неопределено;
		Номенклатура = ВернутьТоварПоКоду(СтрокаОтчет.Код, ХарактеристикаНоменклатуры);
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			Если СтрокаОтчет.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОРПСобственнаяПродукцияОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Характеристика = ?(ЗначениеЗаполнено(СтрокаОтчет.Разрез), 
			ВернутьХарактеристикуПоКоду(СтрокаОтчет.Разрез), 
			ХарактеристикаНоменклатуры);
			НоваяСтрока.Упаковка 			= Номенклатура.ЕдиницаИзмерения;//ВернутьЕдИзмерения(Номенклатура);
			НоваяСтрока.Количество  		= СтрокаОтчет.Количество;
			НоваяСтрока.КоличествоУпаковок  = СтрокаОтчет.Количество;
			НоваяСтрока.Цена	    		= СтрокаОтчет.Цена;
			НоваяСтрока.Сумма	    		= СтрокаОтчет.Сумма;
						
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    НоваяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрока.Упаковка);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 					Новый Структура("НалогообложениеНДС, Дата", 
			ОРПСобственнаяПродукцияОбъект.НалогообложениеНДС, 
			ОРПСобственнаяПродукцияОбъект.Дата));
			
			СтруктураЗаполненияЦены = Новый Структура;
			СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", 	ОРПСобственнаяПродукцияОбъект.ЦенаВключаетНДС);
			СтруктураЗаполненияЦены.Вставить("НалогообложениеНДС", 	ОРПСобственнаяПродукцияОбъект.НалогообложениеНДС);
						
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 				СтруктураЗаполненияЦены);
			//СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 	Новый Структура("Склад, ПараметрыУказанияСерий", ОРПСобственнаяПродукцияОбъект.Склад, ПараметрыУказанияСерий));
			
			СтруктураПолейТЧ = Новый Структура;
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
			СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
			СтруктураПолейТЧ.Вставить("Упаковка");
			СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
			СтруктураПолейТЧ.Вставить("Сумма", 0);
			СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
			СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
			СтруктураПолейТЧ.Вставить("Цена", 0);
			//СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму), "КоличествоУпаковок", СтруктураДействий.ПересчитатьСумму), 0);
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
			
			ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, НоваяСтрока);
			ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(СтруктураПолейТЧ, СтруктураДействий, Неопределено);
		    ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПолейТЧ);

			//НоваяСтрока.Сумма	    		= СтрокаОтчет.Сумма;
			//НоваяСтрока.СтавкаНДС			= Справочники.СтавкиНДС.БезНДС;
			
			Если Номенклатура.ВидНоменклатуры.ИспользоватьСерии Тогда
				НоваяСтрока.Серия = ПодобратьСериюНоменклатурыПоОстатку(Номенклатура, ХарактеристикаНоменклатуры, Склад);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭквайринговыйТерминал = ПолучитьЭквайринговыйТерминалПоПодразделению(ОРПСобственнаяПродукцияОбъект.Подразделение);
	
	ТЗОплаты.Свернуть("Дата, Код, Карта", "Сумма");
	
	НайденныеСтроки = ТЗОплаты.НайтиСтроки(Новый Структура("Дата, Код", Дата, 2));
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока 						= ОРПСобственнаяПродукцияОбъект.ОплатаПлатежнымиКартами.Добавить();
		НоваяСтрока.ЭквайринговыйТерминал	= ЭквайринговыйТерминал;
		НоваяСтрока.Сумма 					= Строка.Сумма;
		НоваяСтрока.НомерПлатежнойКарты 	= ?(ЗначениеЗаполнено(Строка.Карта), Строка.Карта, "НЕОПРЕДЕЛЕНО");
		
	КонецЦикла;
	
	НайденныеСтроки = ТЗОплаты.НайтиСтроки(Новый Структура("Дата, Код", Дата, 3));
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока 						= ОРПСобственнаяПродукцияОбъект.битзпф_ОплатаПрочимиТипами.Добавить();
		НоваяСтрока.ТипОплаты				= Перечисления.битзпф_ТипыОплаты.ТалоныНаМолоко;
		НоваяСтрока.Сумма 					= Строка.Сумма;
		
	КонецЦикла;
	
	НайденныеСтроки = ТЗОплаты.НайтиСтроки(Новый Структура("Дата, Код", Дата, 4));
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока 						= ОРПСобственнаяПродукцияОбъект.битзпф_ОплатаПрочимиТипами.Добавить();
		НоваяСтрока.ТипОплаты				= Перечисления.битзпф_ТипыОплаты.КартаСотрудника;
		НоваяСтрока.Сумма 					= Строка.Сумма;
		НоваяСтрока.НомерКарты 				= Строка.Карта;
		
	КонецЦикла;
	
	Возврат ОРПСобственнаяПродукцияОбъект;
	
КонецФункции


&НаСервере
Процедура ОбновитьСписокДокументовНаСервере()
	
	Для Каждого Строка Из Объект.Документы Цикл
		
		Строка.Проведен 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Документ, "Проведен");
		Строка.ПометкаУдаления 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Документ, "ПометкаУдаления");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Команда)
	
	ОбновитьСписокДокументовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодключениеПоCOM()
	
	Если ЗначениеЗаполнено(АдресПодключениеПоCOM) Тогда
		
		СтруктураПодключениеПоCOM = ПолучитьИзВременногоХранилища(АдресПодключениеПоCOM);	
		Если СтруктураПодключениеПоCOM = Неопределено Тогда
			
			ПодключениеПоCOM = СоздатьНовоеПодключениеПоCOM();
			Если ПодключениеПоCOM <> Неопределено Тогда
				
				СтруктураПодключениеПоCOM = Новый Структура("COMОбъект", ПодключениеПоCOM);
				АдресПодключениеПоCOM = ПоместитьВоВременноеХранилище(СтруктураПодключениеПоCOM, Новый УникальныйИдентификатор);	
				
			КонецЕсли;			
			
		Иначе
			Возврат СтруктураПодключениеПоCOM.COMОбъект; 		
		КонецЕсли;
		
	Иначе 
		
		ПодключениеПоCOM = СоздатьНовоеПодключениеПоCOM();
		Если ПодключениеПоCOM <> Неопределено Тогда
			
			СтруктураПодключениеПоCOM = Новый Структура("COMОбъект", ПодключениеПоCOM);
			АдресПодключениеПоCOM = ПоместитьВоВременноеХранилище(СтруктураПодключениеПоCOM, Новый УникальныйИдентификатор);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодключениеПоCOM;
	
КонецФункции

&НаСервере
Функция СоздатьНовоеПодключениеПоCOM()
	
	СтрокаПодключенияКБазеCOM = СтрШаблон("Srvr=""%1""; Ref=""%2""; Usr=""%3""; Pwd=""%4""", 
	Объект.Srvr, Объект.Ref, Объект.Usr, Объект.Pwd);
	V83COMConnector = Новый COMОбъект("V83.COMConnector");
	Попытка
		ПодключениеПоCOM =  V83COMConnector.Connect(СтрокаПодключенияКБазеCOM);
	Исключение
		
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ПодключениеПоCOM;	
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключениеПоCOM(Команда)
	ПроверитьПодключениеПоCOMНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеПоCOMНаСервере()
	
	ИнформационнаяБазаCOM = ПолучитьПодключениеПоCOM();
	Если ИнформационнаяБазаCOM <> Неопределено Тогда
		Сообщить("Подключение успешно установлено");
	КонецЕсли;
	ИнформационнаяБазаCOM = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОтключитьПодключениеПоCOM();
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьПодключениеПоCOM()
	
	Если ЗначениеЗаполнено(АдресПодключениеПоCOM) Тогда
		СтруктураПодключениеПоCOM = ПолучитьИзВременногоХранилища(АдресПодключениеПоCOM);	
		Если СтруктураПодключениеПоCOM <> Неопределено Тогда
			СтруктураПодключениеПоCOM.COMОбъект = Неопределено;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеПоСотрудникамНаКассыНаСервере()
	
	РеквизитФормыВЗначение("Объект").ВыгрузитьДанныеПоСотрудникамНаКассы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеПоСотрудникамНаКассы(Команда)
	
	ВыгрузитьДанныеПоСотрудникамНаКассыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КассыПодключаемоеОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыКассаККМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Функция УпорядочитьМассив(МассивДляУпорядочивания, Знач ПорядокСортировки = "Возр", Знач СортироватьПоЗначению = Истина) Экспорт

	лПорядокСортировки = НаправлениеСортировки.Возр;
	Если НРег(ПорядокСортировки) = НРег("Убыв") Тогда
		лПорядокСортировки = НаправлениеСортировки.Убыв;
	КонецЕсли;
	
	СЗ = Новый СписокЗначений;
	СЗ.ЗагрузитьЗначения(МассивДляУпорядочивания);
	Если СортироватьПоЗначению Тогда
		СЗ.СортироватьПоЗначению(лПорядокСортировки);
	Иначе
		СЗ.СортироватьПоПредставлению(лПорядокСортировки);
	КонецЕсли;
	МассивДляУпорядочивания = СЗ.ВыгрузитьЗначения();
	
	Возврат МассивДляУпорядочивания;

КонецФункции